<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿焦的博客</title>
  
  <subtitle>一名拥抱AI的GISer</subtitle>
  <link href="/node_modules/hexo-generator-feed/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-13T08:28:20.846Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JiaoXN</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>上传并在地图中显示Shp文件</title>
    <link href="http://yoursite.com/2019/03/%E4%B8%8A%E4%BC%A0%E5%B9%B6%E5%9C%A8%E5%9C%B0%E5%9B%BE%E4%B8%AD%E6%98%BE%E7%A4%BAShp%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/03/上传并在地图中显示Shp文件/</id>
    <published>2019-03-13T02:26:19.000Z</published>
    <updated>2019-03-13T08:28:20.846Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间参与了一个项目，客户有一个功能需求是上传SHP文件并在地图上显示，然后在此基础上做缓冲区处理。经过对比测试，最终选择了shapefile.js工具，在此做个记录。</p><p><a href="https://www.npmjs.com/package/shapefile" target="_blank" rel="noopener">shapfe.js</a>能够将Esri的Shapefile文件转换为GeoJSON，它能够以Shapefile文件zip的压缩文件和单独的.shp文件作为输入参数。</p><h3 id="shapefile-js安装"><a href="#shapefile-js安装" class="headerlink" title="shapefile.js安装"></a>shapefile.js安装</h3><p>项目是基于Vue开发的，因此选择了npm的安装方式，安装非常简单，执行下面的命令就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install shpjs</span><br></pre></td></tr></table></figure><h3 id="获取上传的SHP文件"><a href="#获取上传的SHP文件" class="headerlink" title="获取上传的SHP文件"></a>获取上传的SHP文件</h3><p>在HTML中可使用type为file的input标签获取上传的.shp文件或者压缩后的Shapefile文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; id=&quot;uploadFileInput&quot; name=&quot;zip&quot; @change=&quot;selectShpFile()&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">selectShpFile: function() &#123;</span><br><span class="line">  this.shpFile = document.getElementById(&quot;uploadFileInput&quot;).files[0];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用FileReader处理上传后的SHP文件"><a href="#使用FileReader处理上传后的SHP文件" class="headerlink" title="使用FileReader处理上传后的SHP文件"></a>使用FileReader处理上传后的SHP文件</h3><p>JavaScript中的<a href="https://www.javascripture.com/FileReader" target="_blank" rel="noopener">FileReader</a>用来读取Blob或者File的内容。</p><p>FileReader共包含4个方法，其中三个用来读取文件内容，一个用来打断读取。</p><table><thead><tr><th style="text-align:center">方法名称</th><th style="text-align:center">方法参数</th><th style="text-align:left">方法描述</th></tr></thead><tbody><tr><td style="text-align:center">abort</td><td style="text-align:center">–</td><td style="text-align:left">中断文件读取</td></tr><tr><td style="text-align:center">readAsBinaryString</td><td style="text-align:center">File</td><td style="text-align:left">将文件读取为二级制码</td></tr><tr><td style="text-align:center">readAsDataURL</td><td style="text-align:center">File</td><td style="text-align:left">将文件读取为DataURL</td></tr><tr><td style="text-align:center">readAsText</td><td style="text-align:center">File, [encoding]</td><td style="text-align:left">将文件读取为文本</td></tr></tbody></table><p>FileReader处理事件共有6个，具体描述如下：</p><table><thead><tr><th style="text-align:center">事件名称</th><th style="text-align:left">事件描述</th></tr></thead><tbody><tr><td style="text-align:center">onabort</td><td style="text-align:left">中断时触发</td></tr><tr><td style="text-align:center">onerror</td><td style="text-align:left">出错时触发</td></tr><tr><td style="text-align:center">onload</td><td style="text-align:left">文件读取成功时触发</td></tr><tr><td style="text-align:center">onloadend</td><td style="text-align:left">读取完成时触发，无论成功或失败</td></tr><tr><td style="text-align:center">onloadstart</td><td style="text-align:left">读取开始时触发</td></tr><tr><td style="text-align:center">onprogress</td><td style="text-align:left">读取中</td></tr></tbody></table><p>这里需要注意的一点是，文件一旦开始读取，无论成功还是失败，实例的result属性都会被填充，也就是说如果读取失败，result的值为null，读取成功则为读取的结果。</p><p>在本项目中，我们使用了readAsBinaryString方法，并且监听onload事件获取文件的读取内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let fileReader = new FileReader();</span><br><span class="line"></span><br><span class="line">fileReader.readAsArrayBuffer(shpFile);</span><br><span class="line">fileReader.onload = function() &#123;</span><br><span class="line">    // 获取读取的结果</span><br><span class="line">    console.log(this.result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用shapefile-js将SHP文件读取为GeoJSON"><a href="#使用shapefile-js将SHP文件读取为GeoJSON" class="headerlink" title="使用shapefile.js将SHP文件读取为GeoJSON"></a>使用shapefile.js将SHP文件读取为GeoJSON</h3><p>shapefile.js使用也非常简单，我们使用其read方法，并将上一步的文件的二进制读取结果作为read方法的参数，然后在其回调函数中获取GeoJson。</p><p>这一步和上一步的整合后的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let fileReader = new FileReader();</span><br><span class="line"></span><br><span class="line">fileReader.readAsArrayBuffer(shpFile);</span><br><span class="line">fileReader.onload = function() &#123;</span><br><span class="line">    let shapefile = require(&quot;shapefile&quot;);</span><br><span class="line">    shapefile</span><br><span class="line">      .read(this.result)</span><br><span class="line">      .then(geoJson =&gt; &#123;</span><br><span class="line">        console.log(geoJson);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GeoJSON文件内容如下图所示：</p><p><img src="/2019/03/上传并在地图中显示Shp文件/GeoJSON内容.png" alt="GeoJSON对象内容"></p><h3 id="在地图中加载GeoJson"><a href="#在地图中加载GeoJson" class="headerlink" title="在地图中加载GeoJson"></a>在地图中加载GeoJson</h3><p>在地图中加载GeoJson需要遍历其features属性，将其中的每个feature转为对应的几何对象（点、线或者面），然后将转换的几何对象构建成一个Graphic，最后将Graphic添加到GraphicLayer中。</p><h4 id="遍历features，构建Polygon对象"><a href="#遍历features，构建Polygon对象" class="headerlink" title="遍历features，构建Polygon对象"></a>遍历features，构建Polygon对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">geoJson.features.map(feature =&gt; &#123;</span><br><span class="line">  const polygon = new EsriPolygon(&#123;</span><br><span class="line">    spatialReference: new EsriSpatialReference(&#123; wkid: 2380 &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  feature.geometry.coordinates.forEach(function(coord) &#123;</span><br><span class="line">    const coordinates =</span><br><span class="line">      feature.geometry.type === &quot;MultiPolygon&quot; ? coord[0] : coord;</span><br><span class="line">    polygon.addRing(coordinates);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Polygon构建Graphic，并添加到GraphicLayer"><a href="#Polygon构建Graphic，并添加到GraphicLayer" class="headerlink" title="Polygon构建Graphic，并添加到GraphicLayer"></a>Polygon构建Graphic，并添加到GraphicLayer</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">let graphics = [];</span><br><span class="line">let graphicsExtent = null;</span><br><span class="line"></span><br><span class="line">geoJson.features.map(feature =&gt; &#123;</span><br><span class="line">  const polygon = new EsriPolygon(&#123;</span><br><span class="line">    spatialReference: new EsriSpatialReference(&#123; wkid: 2380 &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  feature.geometry.coordinates.forEach(function(coord) &#123;</span><br><span class="line">    const coordinates =</span><br><span class="line">      feature.geometry.type === &quot;MultiPolygon&quot; ? coord[0] : coord;</span><br><span class="line">    polygon.addRing(coordinates);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  const graphic = new EsriGraphic(&#123;</span><br><span class="line">    geometry: polygon,</span><br><span class="line">    attributes: feature.properties,</span><br><span class="line">    symbol: &#123;</span><br><span class="line">      type: &quot;simple-fill&quot;, // autocasts as new SimpleFillSymbol()</span><br><span class="line">      color: [51, 51, 204, 0.9],</span><br><span class="line">      style: &quot;solid&quot;,</span><br><span class="line">      outline: &#123;</span><br><span class="line">        color: &quot;white&quot;,</span><br><span class="line">        width: 1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  graphics.push(graphic);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">graphicLayer.addMany(graphics);</span><br></pre></td></tr></table></figure><p>至此，我们已经完成了上传并在地图中展示SHP文件的整个流程，下一步就可以调用相应的API函数创建缓冲区，并执行接下来的各种功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前段时间参与了一个项目，客户有一个功能需求是上传SHP文件并在地图上显示，然后在此基础上做缓冲区处理。经过对比测试，最终选择了shapefile.js工具，在此做个记录。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/shape
      
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Shapefile" scheme="http://yoursite.com/tags/Shapefile/"/>
    
      <category term="上传" scheme="http://yoursite.com/tags/%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>基于REST的方式下载Portal中的要素服务</title>
    <link href="http://yoursite.com/2019/03/%E5%9F%BA%E4%BA%8EREST%E7%9A%84%E6%96%B9%E5%BC%8F%E4%B8%8B%E8%BD%BDPortal%E4%B8%AD%E7%9A%84%E8%A6%81%E7%B4%A0%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/03/基于REST的方式下载Portal中的要素服务/</id>
    <published>2019-03-13T02:25:07.000Z</published>
    <updated>2019-03-14T02:36:16.971Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal中下载要素服务的流程"><a href="#Portal中下载要素服务的流程" class="headerlink" title="Portal中下载要素服务的流程"></a>Portal中下载要素服务的流程</h3><p>正像之前的博客中谈到的，要素服务在Portal中有两种存储方式，一种是存储到时空型数据库中，一种是存储到关系型数据库中。两种存储方式的不同，导致了下载流程的不一样。</p><ul><li>从关系型数据库中下载</li></ul><p>在要素服务的面板中右侧，点击<strong>Export Data</strong>，可以看到可以将要素服务导出成Shapefile、CSV File、Excel、FGDB等格式的文件，这里以Shapefile为例，点击<strong>Export to Shapefile</strong>，在弹出的对话框中设置相应的参数信息，即可完成Shapefile的导出功能。</p><p><img src="/2019/03/基于REST的方式下载Portal中的要素服务/要素导出选项.png" alt="要素导出成Shapfile参数示例"></p><p><img src="/2019/03/基于REST的方式下载Portal中的要素服务/要素导出成Shapfile参数示例.png" alt="要素导出成Shapfile参数示例"></p><p>导出成功后，当前页面会自动刷新，转置Shapefile的页面，在当前的页面中点击Download按钮下载Shapefile文件。</p><ul><li>从时空型数据库中下载</li></ul><p>从时空型数据库中导出要素服务，首先要通过GA的Copy to DataStore工具将要素服务复制到关系型数据库中，然后关系型数据库导出要素服务的流程导出。</p><p>跟踪Portal中导出要素服务的网络请求，可以得到整个流程使用的哪些REST API，接下来将会一一介绍。</p><h3 id="通过REST-API实现要素服务的下载"><a href="#通过REST-API实现要素服务的下载" class="headerlink" title="通过REST API实现要素服务的下载"></a>通过REST API实现要素服务的下载</h3><ul><li>从时空型数据库中下载</li></ul><p>如上所述，首先我们需要做的是调用<a href="https://developers.arcgis.com/rest/services-reference/copy-to-data-store.htm" target="_blank" rel="noopener">Copy to DataStore</a>的REST API将要素导出至关系型数据库中。</p><p>该工具的API使用方式和GA的Overlay工具使用方式类似，请参考我的另外一篇<a href="https://jiaoxn.com.cn/2019/03/%E5%9F%BA%E4%BA%8EREST%E7%9A%84%E6%96%B9%E5%BC%8F%E8%AE%BF%E9%97%AEPortal%E7%9A%84GA%E5%B7%A5%E5%85%B7/#more" target="_blank" rel="noopener">博客</a>，这里就不在赘述了。</p><p>导出成功后的操作流程请参看下一小节。</p><ul><li>从关系型数据库中下载</li></ul><p>在实际应用中我们会常常获取到要素服务的名称，但是Portal中的导出工具是以ItemId为基准的，因此我们提前要根据要素服务的名称查找其对应的ID。</p><p><a href="https://developers.arcgis.com/rest/users-groups-and-items/search.htm" target="_blank" rel="noopener">查找</a>的参数配置及实现代码如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let searchParams = &#123;</span><br><span class="line">    countFields: &quot;access, contentstatus, categories&quot;,</span><br><span class="line">    q: that.gaOutputName,</span><br><span class="line">    start: 1,</span><br><span class="line">    num: 10,</span><br><span class="line">    f: &quot;json&quot;,</span><br><span class="line">    countSize: 10,</span><br><span class="line">    token: portalToken</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let searchRequestUrl =</span><br><span class="line">    &quot;https://&quot; +</span><br><span class="line">    Vue.prototype[&quot;portalDomainName&quot;] +</span><br><span class="line">    &quot;/arcgis/sharing/rest/search&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">postRequestOfAxios(</span><br><span class="line">      searchRequestUrl,</span><br><span class="line">      qs.stringify(searchParams),</span><br><span class="line">      function(requestResultInfo) &#123;</span><br><span class="line">        let overlayResultId = requestResultInfo.data.results[0].id;</span><br><span class="line"></span><br><span class="line">        // do export</span><br><span class="line">      &#125;,</span><br><span class="line">      function(requestErrorInfo) &#123;</span><br><span class="line">        failCallBack();</span><br><span class="line"></span><br><span class="line">        console.log(requestErrorInfo);</span><br><span class="line">      &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>接下来呢，就是根据获取到的ID执行要素<a href="https://developers.arcgis.com/rest/users-groups-and-items/export-item.htm" target="_blank" rel="noopener">导出</a>功能。导出的API参数配置及功能实现如下所示。导出成功后，会返回一个相应的JOB ID，需要每个一段时间根据这个JOB ID查看任务状态，直到导出这个状态结束为止。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let exportToShpParams = &#123;</span><br><span class="line">    itemId: overlayResultId,</span><br><span class="line">    exportFormat: &quot;Shapefile&quot;,</span><br><span class="line">    f: &quot;json&quot;,</span><br><span class="line">    token: portalToken</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let exportRequestUrl =</span><br><span class="line">    &quot;https://&quot; +</span><br><span class="line">    Vue.prototype[&quot;portalDomainName&quot;] +</span><br><span class="line">    &quot;/arcgis/sharing/rest/content/users/&quot; +</span><br><span class="line">    Vue.prototype[&quot;portalUserName&quot;] +</span><br><span class="line">    &quot;/export&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">postRequestOfAxios(</span><br><span class="line">    exportRequestUrl,</span><br><span class="line">    qs.stringify(exportToShpParams),</span><br><span class="line">    function(requestResultInfo) &#123;</span><br><span class="line">        let exportShpFileJobId = requestResultInfo.data.jobId;</span><br><span class="line">        let exportShpFileItemId = requestResultInfo.data.exportItemId;</span><br><span class="line"></span><br><span class="line">        // 间隔2秒，查询要素导出的状态。</span><br><span class="line">        let exportStatusWindowsInterval = window.setInterval(function() &#123;</span><br><span class="line">            let exportStatusShpFileJobUrl =</span><br><span class="line">                &quot;https://&quot; +</span><br><span class="line">                Vue.prototype[&quot;portalDomainName&quot;] +</span><br><span class="line">                &quot;/arcgis/sharing/rest/content/users/&quot; +</span><br><span class="line">                Vue.prototype[&quot;portalUserName&quot;] +</span><br><span class="line">                &quot;/items/&quot; +</span><br><span class="line">                exportShpFileItemId +</span><br><span class="line">                &quot;/status&quot;;</span><br><span class="line">        </span><br><span class="line">            let exportShpFileStatusData = &#123;</span><br><span class="line">                jobId: exportShpFileJobId,</span><br><span class="line">                jobType: &quot;export&quot;,</span><br><span class="line">                f: &quot;json&quot;,</span><br><span class="line">                token: portalToken</span><br><span class="line">            &#125;;</span><br><span class="line">    </span><br><span class="line">            postRequestOfAxios(</span><br><span class="line">                exportStatusShpFileJobUrl,</span><br><span class="line">                qs.stringify(exportShpFileStatusData),</span><br><span class="line">                function(requestResultInfo) &#123;</span><br><span class="line">                      if (requestResultInfo.data.status === &quot;completed&quot;) &#123;</span><br><span class="line">                          window.clearInterval(exportStatusWindowsInterval);</span><br><span class="line">                              </span><br><span class="line">                          // do download</span><br><span class="line">                      &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                function(requestErrorInfo) &#123;</span><br><span class="line">                      console.log(requestErrorInfo);</span><br><span class="line">                      </span><br><span class="line">                      window.clearInterval(exportStatusWindowsInterval);\</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">        &#125;, 2000);</span><br><span class="line">    &#125;,</span><br><span class="line">    function(requestErrorInfo) &#123;</span><br><span class="line">        failCallBack();</span><br><span class="line">        </span><br><span class="line">        console.log(requestErrorInfo);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>导出成功后，根据导出结果的item id以及Portal的token拼接Shapefile的下载地址，然后使用location.href方法下载Shapefile文件，实现代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location.href =</span><br><span class="line">    &quot;https://&quot; +</span><br><span class="line">    Vue.prototype[&quot;portalDomainName&quot;] +</span><br><span class="line">    &quot;/arcgis/sharing/rest/content/items/&quot; +</span><br><span class="line">    exportShpFileItemId +</span><br><span class="line">    &quot;/data?token=&quot; +</span><br><span class="line">    portalToken;</span><br></pre></td></tr></table></figure><p>至此，我们完成要素服务导出及下载为Shapefile的整个流程，感兴趣的朋友可以试试将要素服务导出成CSV等其他Portal支持的文件格式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal中下载要素服务的流程&quot;&gt;&lt;a href=&quot;#Portal中下载要素服务的流程&quot; class=&quot;headerlink&quot; title=&quot;Portal中下载要素服务的流程&quot;&gt;&lt;/a&gt;Portal中下载要素服务的流程&lt;/h3&gt;&lt;p&gt;正像之前的博客中谈到的，要素
      
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Portal" scheme="http://yoursite.com/tags/Portal/"/>
    
      <category term="Shapefile" scheme="http://yoursite.com/tags/Shapefile/"/>
    
  </entry>
  
  <entry>
    <title>基于REST的方式访问Portal的GA工具</title>
    <link href="http://yoursite.com/2019/03/%E5%9F%BA%E4%BA%8EREST%E7%9A%84%E6%96%B9%E5%BC%8F%E8%AE%BF%E9%97%AEPortal%E7%9A%84GA%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2019/03/基于REST的方式访问Portal的GA工具/</id>
    <published>2019-03-13T02:24:09.000Z</published>
    <updated>2019-03-13T09:54:23.536Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Portal、GA和REST-API简介"><a href="#Portal、GA和REST-API简介" class="headerlink" title="Portal、GA和REST API简介"></a>Portal、GA和REST API简介</h3><p><a href="http://enterprise.arcgis.com/zh-tw/portal/latest/administer/windows/what-is-portal-for-arcgis-.htm" target="_blank" rel="noopener">Portal for ArcGIS</a>是一个门户网站，可用户与组织内的其他人便捷地分享地图、场景、应用和其他地理信息。</p><p>GeoAnalytics Server是ArcGIS产品体系中针对空间大数据做高级分析的软件产品，可通过ArcGIS Pro或者Portal for ArcGIS执行大数据分析，也可以通过REST的方式进行远程调用。</p><p><a href="https://developers.arcgis.com/rest/" target="_blank" rel="noopener">ArcGIS REST API</a>方便开发者将ArcGIS服务和功能集成到应用程序中，可实现访问ArcGIS服务（如地理编码和路由），也可以构建与ArcGIS Online和ArcGIS Enterprise深度集成的应用程序。</p><p>本篇博客一个GA的Overlay工具为例，介绍如何通过REST API访问Portal中的GA工具。通过访问REST API中的<a href="https://developers.arcgis.com/rest/services-reference/overlay-layers.htm" target="_blank" rel="noopener">Overlay</a>工具描述，可以了解到输入参数和响应结果信息。</p><h3 id="叠加图层的选择"><a href="#叠加图层的选择" class="headerlink" title="叠加图层的选择"></a>叠加图层的选择</h3><p>在实际应用中，常常使用发布的大数据的服务地址作为叠加工具的输入图层。叠加工具的叠加要素的选择基本上是有两种选择：一种是服务地址，一种是Feature Collection。经过对比测试，前者要比后者更稳定一些。因此，本篇博客使用服务地址作为叠加工具的叠加图层参数。</p><p>考虑到用户的实际需求（比如：上传一个SHP文件或者手绘一个范围并以此作为叠加要素，即：叠加要素是经常变的），因此建议发布一个要素服务，设置其为可编辑状态（如下图所示），然后将其作为叠加工具的叠加要素。</p><p><img src="/2019/03/基于REST的方式访问Portal的GA工具/设置要素服务的可编辑状态.png" alt="设置要素服务的可编辑状态"></p><p>在前端页面实现上诉思路时，在绘制叠加范围或者上传SHP文件之前需要将这个要素服务清空，然后将绘制的范围或SHP文件内容添加到这个要素服务中。</p><p>下面的代码先对要素图层进行要素检索，如果有要素，则将其删除，然后将新的要素添加到该服务中；如果没有要素，则直接将新的要素添加该服务中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">overlayLayer.queryFeatures().then(function(results) &#123;</span><br><span class="line">    if (results.features.length &gt; 0) &#123;</span><br><span class="line">        overlayLayer</span><br><span class="line">          .applyEdits(&#123;</span><br><span class="line">            deleteFeatures: results.features</span><br><span class="line">          &#125;)</span><br><span class="line">          .then(function(_) &#123;</span><br><span class="line">            overlayLayer</span><br><span class="line">              .applyEdits(&#123;</span><br><span class="line">                addFeatures: overlayLayerAddingGraphics</span><br><span class="line">              &#125;)</span><br><span class="line">              .then(function(editsResult) &#123;</span><br><span class="line">                overlayLayer.refresh();</span><br><span class="line">                </span><br><span class="line">                // do overlay</span><br><span class="line">              &#125;)</span><br><span class="line">              .catch(function(error) &#123;</span><br><span class="line">                console.log(error);</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        overlayLayer</span><br><span class="line">          .applyEdits(&#123;</span><br><span class="line">            addFeatures: overlayLayerAddingGraphics</span><br><span class="line">          &#125;)</span><br><span class="line">          .then(function(editsResult) &#123;</span><br><span class="line">            overlayLayer.refresh();</span><br><span class="line">            </span><br><span class="line">            // do overlay</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(function(error) &#123;</span><br><span class="line">            console.log(error);</span><br><span class="line">          &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="叠加范围的选择"><a href="#叠加范围的选择" class="headerlink" title="叠加范围的选择"></a>叠加范围的选择</h3><p>GA的分析工具的环境设置中默认将输入图层的图层范围作为工具的分析范围。因此，如果你的输入图层范围过大时，建议将工具的分析范围设置为叠加图层的范围，这样可以加快工具的执行时间。</p><h3 id="叠加结果的存储方式"><a href="#叠加结果的存储方式" class="headerlink" title="叠加结果的存储方式"></a>叠加结果的存储方式</h3><p>GA的分析工具的分析结果存储方式有两种，一种是存储在时空大数据库中，一种是存储到关系型数据中，默认是存储在时空大数据库中。经过测试，如果选择存储到时空大数据库中，无论是否设置输出结果的坐标系，输出结果都是WGS84坐标系；而存储到关系数据库中，如果未指定输出结果的坐标系，输出结果的坐标系和输入要素的坐标系相同，反之为指定的坐标系。因此，这里建议将处理结果输出到关系型数据库中。</p><p>整个Overlay分析工具的参数如下如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">let restData = &#123;</span><br><span class="line">    overlayLayer:</span><br><span class="line">      &apos;&#123;&quot;url&quot;: &quot;&apos; + Vue.prototype[&quot;featureServerUrl&quot;] + &apos;&quot;&#125;&apos;,</span><br><span class="line">    inputLayer:</span><br><span class="line">      &apos;&#123;&quot;url&quot;: &quot;&apos; +</span><br><span class="line">      Vue.prototype[&quot;overlayFeatureServerUrl&quot;] +</span><br><span class="line">      &apos;&quot;&#125;&apos;,</span><br><span class="line">    overlayType: &quot;Intersect&quot;,</span><br><span class="line">    includeOverlaps: &quot;false&quot;,</span><br><span class="line">    outputName: that.gaOutputName,</span><br><span class="line">    context: &quot;&quot;,</span><br><span class="line">    f: &quot;json&quot;,</span><br><span class="line">    token: portalToken</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let context = &#123;</span><br><span class="line">    extent: getOverlayLayerExtent(</span><br><span class="line">      that.esriView,</span><br><span class="line">      quickClipSettingParams.selectedClipInputLayer</span><br><span class="line">    ),</span><br><span class="line">    processSR: overlayLayer.spatialReference,</span><br><span class="line">    dataStore: &quot;relational&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">restData.context = JSON.stringify(context);</span><br></pre></td></tr></table></figure><h3 id="执行叠加工具"><a href="#执行叠加工具" class="headerlink" title="执行叠加工具"></a>执行叠加工具</h3><p>叠加工具的参数配置完成后，可以使用ajax或axios方式发送POST请求，请求执行叠加分析，实现代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">export const postRequestOfAxios = (</span><br><span class="line">  requestUrl,</span><br><span class="line">  requestData,</span><br><span class="line">  successfulCallback,</span><br><span class="line">  failCallback</span><br><span class="line">) =&gt; &#123;</span><br><span class="line">  axios</span><br><span class="line">    .post(requestUrl, requestData, &#123;</span><br><span class="line">      timeout: 3600000,</span><br><span class="line">      cache: false,</span><br><span class="line">      async: false,</span><br><span class="line">      dataType: &quot;jsonp&quot;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(function(requestResultInfo) &#123;</span><br><span class="line">      successfulCallback(requestResultInfo);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(function(requestErrorInfo) &#123;</span><br><span class="line">      failCallback(requestErrorInfo);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">postRequestOfAxios(</span><br><span class="line">    postRequestUrl,</span><br><span class="line">    qs.stringify(restData),</span><br><span class="line">    function(requestResultInfo) &#123;</span><br><span class="line">        let jobId = requestResultInfo.data.jobId;</span><br><span class="line">        </span><br><span class="line">        // Check Job Status</span><br><span class="line">    &#125;,</span><br><span class="line">    function(requestErrorInfo) &#123;</span><br><span class="line">      console.log(requestErrorInfo);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="检查叠加分析任务的状态，获取叠加分析结果图层地址"><a href="#检查叠加分析任务的状态，获取叠加分析结果图层地址" class="headerlink" title="检查叠加分析任务的状态，获取叠加分析结果图层地址"></a>检查叠加分析任务的状态，获取叠加分析结果图层地址</h3><p>正如上述代码所示，叠加分析的POST请求会返回一个对应的JOB ID，并不会直接返回叠加结果的图层地址。这是因为叠加分析需要一定的时间，因此我们需要使用这个JOB ID访问叠加分析任务的状态，直到分析成功或者分析失败。</p><p>这里使用setInterval方法，每个2s查询一次叠加分析任务的状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">that.overlayWindowsInterval = window.setInterval(</span><br><span class="line">    function() &#123;</span><br><span class="line">        checkGAToolStatus(</span><br><span class="line">            overlayToolsUrl,</span><br><span class="line">            jobId,</span><br><span class="line">            Vue.prototype[&quot;portalDomainName&quot;],</span><br><span class="line">            portalToken,</span><br><span class="line">            that.overlayWindowsInterval,</span><br><span class="line">            that.esriView,</span><br><span class="line">            successCallBack,</span><br><span class="line">            failCallBack</span><br><span class="line">        );</span><br><span class="line">    &#125;,</span><br><span class="line">    2000</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">function checkGAToolStatus(</span><br><span class="line">  gaToolUrl,</span><br><span class="line">  gaToolJobId,</span><br><span class="line">  portalDomainName,</span><br><span class="line">  portalToken,</span><br><span class="line">  overlayWindowsInterval,</span><br><span class="line">  esriView,</span><br><span class="line">  successCallBack,</span><br><span class="line">  failCallBack</span><br><span class="line">) &#123;</span><br><span class="line">  let jobUrl = gaToolUrl + &quot;/jobs/&quot; + gaToolJobId;</span><br><span class="line">  let data = &#123;</span><br><span class="line">    f: &quot;pjson&quot;,</span><br><span class="line">    token: portalToken</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  postRequestOfAxios(</span><br><span class="line">    jobUrl,</span><br><span class="line">    qs.stringify(data),</span><br><span class="line">    function(requestResultInfo) &#123;</span><br><span class="line">      let jobStatus = requestResultInfo.data.jobStatus;</span><br><span class="line"></span><br><span class="line">      if (</span><br><span class="line">        jobStatus === &quot;esriJobSubmitted&quot; ||</span><br><span class="line">        jobStatus === &quot;esriJobWaiting&quot; ||</span><br><span class="line">        jobStatus === &quot;esriJobExecuting&quot;</span><br><span class="line">      ) &#123;</span><br><span class="line">        console.log(jobStatus);</span><br><span class="line">      &#125; else if (</span><br><span class="line">        jobStatus === &quot;esriJobFailed&quot; ||</span><br><span class="line">        jobStatus === &quot;esriJobTimedOut&quot; ||</span><br><span class="line">        jobStatus === &quot;esriJobCancelling&quot; ||</span><br><span class="line">        jobStatus === &quot;esriJobCancelled&quot;</span><br><span class="line">      ) &#123;</span><br><span class="line">        window.clearInterval(overlayWindowsInterval);</span><br><span class="line"></span><br><span class="line">        failCallBack();</span><br><span class="line"></span><br><span class="line">        console.log(jobStatus);</span><br><span class="line">      &#125; else if (jobStatus === &quot;esriJobSucceeded&quot;) &#123;</span><br><span class="line">        window.clearInterval(overlayWindowsInterval);</span><br><span class="line"></span><br><span class="line">        let jobOutputRequestUrl = jobUrl + &quot;/results/output&quot;;</span><br><span class="line"></span><br><span class="line">        postRequestOfAxios(</span><br><span class="line">          jobOutputRequestUrl,</span><br><span class="line">          qs.stringify(data),</span><br><span class="line">          function(requestResultInfo) &#123;</span><br><span class="line">            esriLoader</span><br><span class="line">              .loadModules([&quot;esri/layers/FeatureLayer&quot;], gisConfig.arcgisApi)</span><br><span class="line">              .then(([EsriFeatureLayer]) =&gt; &#123;</span><br><span class="line">                let gaResultFeatureLayer = findLayerById(</span><br><span class="line">                  esriView,</span><br><span class="line">                  gisConfig.overlayResultLayerId</span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">                if (gaResultFeatureLayer) &#123;</span><br><span class="line">                  esriView.map.remove(gaResultFeatureLayer);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                gaResultFeatureLayer = new EsriFeatureLayer(&#123;</span><br><span class="line">                  url: requestResultInfo.data.value.url,</span><br><span class="line">                  id: gisConfig.overlayResultLayerId,</span><br><span class="line">                  title: &quot;裁剪结果&quot;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                esriView.map.add(gaResultFeatureLayer);</span><br><span class="line"></span><br><span class="line">                successCallBack();</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          function(requestErrorInfo) &#123;</span><br><span class="line">            console.log(requestErrorInfo);</span><br><span class="line"></span><br><span class="line">            failCallBack();</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    function(requestErrorInfo) &#123;</span><br><span class="line">      console.log(requestErrorInfo);</span><br><span class="line"></span><br><span class="line">      failCallBack();</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们已经完成了通过REST调用GA的Overlay工具并将结果显示在当前地图中的整个流程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Portal、GA和REST-API简介&quot;&gt;&lt;a href=&quot;#Portal、GA和REST-API简介&quot; class=&quot;headerlink&quot; title=&quot;Portal、GA和REST API简介&quot;&gt;&lt;/a&gt;Portal、GA和REST API简介&lt;/h3&gt;&lt;
      
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Portal" scheme="http://yoursite.com/tags/Portal/"/>
    
      <category term="GA" scheme="http://yoursite.com/tags/GA/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS_API_For_JavaScript本地部署及跨域问题解决方法</title>
    <link href="http://yoursite.com/2019/03/ArcGIS-API-For-JavaScript%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%8F%8A%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/03/ArcGIS-API-For-JavaScript本地部署及跨域问题解决方法/</id>
    <published>2019-03-13T02:04:22.000Z</published>
    <updated>2019-03-13T03:33:10.231Z</updated>
    
    <content type="html"><![CDATA[<p>Esri提供了在线版本的<a href="https://developers.arcgis.com/javascript/" target="_blank" rel="noopener">ArcGIS API For JavaScript</a>，方便开发者调用。但在有些项目中，由于某些原因不能访问外网，因此有必要在局域网中部署一条ArcGIS API For JavaScript。</p><p>本篇博客中使用Tomcat来作为Web应用服务器。Java JDK和Tomcat的安装配置可参考我的另外一篇<a href="https://jiaoxn.com.cn/2019/01/Centos%E5%8D%95%E6%9C%BA%E5%AE%89%E8%A3%85PortalForArcGIS/#more" target="_blank" rel="noopener">博客</a>，也可在百度上搜索相关的教程。</p><p>首先呢，需要从<a href="https://developers.arcgis.com/downloads/apis-and-sdks?product=javascript" target="_blank" rel="noopener">官方网站</a>上下载最新的API（此处以4.10版本为例），然后将其解压，拷贝到tomcat安装目录下的webapp文件夹中，目录结果如下图所示。</p><p><img src="/2019/03/ArcGIS-API-For-JavaScript本地部署及跨域问题解决方法/webapp目录结构.png" alt="Tomcat的webapp目录结构"></p><p>在<strong>arcgis_js_api\library\4.10</strong>文件夹中，分别编辑<strong>init.js</strong>和<strong>dojo\dojo.js</strong>文件，将这里两个文件中的[HOSTNAME_AND_PATH_TO_JSAPI]替换为<strong>10.10.10.10/arcgis_js_v410_api/arcgis_js_api/library/4.10/</strong>，其中10.10.10.10是机器的IP地址，arcgis_js_v410_api/arcgis_js_api/library/4.10/为基于webapp文件夹访问init.js的路径。<br>在浏览器中输入<a href="https://10.10.10.10/arcgis_js_v410_api/arcgis_js_api/library/4.10/dojo/dojo.js" target="_blank" rel="noopener">https://10.10.10.10/arcgis_js_v410_api/arcgis_js_api/library/4.10/dojo/dojo.js</a> ，如果可以访问表示，JS API配置成功。</p><p>到了这一步JS API已经在Tomcat中部署好了，如果此时在前端调用，会发现地图的放大或缩小等其他按钮图标不能正常显示，此时我们需要对Tomcat做进一步的跨域处理。</p><p>下载Tomcat配置跨域所需的文件（链接：<a href="https://pan.baidu.com/s/1uV6MsQH6SUaA8RTC2qOQdQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1uV6MsQH6SUaA8RTC2qOQdQ</a> ，提取码：dedj），然后将加压后的文件夹中的cors-filter-2.5.jar和java-property-utils-1.9.1拷贝到tomcat的lib文件夹内，然后编辑conf文件夹中的web.xml，在250行左右添加如下内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter&gt;    </span><br><span class="line">    &lt;filter-name&gt;CORS&lt;/filter-name&gt;    </span><br><span class="line">    &lt;filter-class&gt;com.thetransactioncompany.cors.CORSFilter&lt;/filter-class&gt;    </span><br><span class="line">    &lt;init-param&gt;    </span><br><span class="line">        &lt;param-name&gt;cors.allowOrigin&lt;/param-name&gt;   </span><br><span class="line">        &lt;param-value&gt;*&lt;/param-value&gt;   </span><br><span class="line">    &lt;/init-param&gt;    </span><br><span class="line">    &lt;init-param&gt;    </span><br><span class="line">        &lt;param-name&gt;cors.supportedMethods&lt;/param-name&gt;   </span><br><span class="line">        &lt;param-value&gt;GET, POST, HEAD, PUT, DELETE&lt;/param-value&gt;   </span><br><span class="line">    &lt;/init-param&gt;    </span><br><span class="line">    &lt;init-param&gt;    </span><br><span class="line">        &lt;param-name&gt;cors.supportedHeaders&lt;/param-name&gt;   </span><br><span class="line">        &lt;param-value&gt;Accept, Origin, X-Requested-With, Content-Type, Last-Modified&lt;/param-value&gt;   </span><br><span class="line">    &lt;/init-param&gt;    </span><br><span class="line">    &lt;init-param&gt;    </span><br><span class="line">        &lt;param-name&gt;cors.exposedHeaders&lt;/param-name&gt;   </span><br><span class="line">        &lt;param-value&gt;Set-Cookie&lt;/param-value&gt;   </span><br><span class="line">    &lt;/init-param&gt;    </span><br><span class="line">    &lt;init-param&gt;    </span><br><span class="line">        &lt;param-name&gt;cors.supportsCredentials&lt;/param-name&gt;   </span><br><span class="line">        &lt;param-value&gt;true&lt;/param-value&gt;   </span><br><span class="line">    &lt;/init-param&gt;    </span><br><span class="line">&lt;/filter&gt;    </span><br><span class="line">&lt;filter-mapping&gt;    </span><br><span class="line">    &lt;filter-name&gt;CORS&lt;/filter-name&gt;    </span><br><span class="line">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;    </span><br><span class="line">&lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure><p>配置web.xml文件后，重启tomcat服务。然后刷新前端页面，如果能够访问到正常的图标文件，表示ArcGIS API For JavaScript可以正常使用了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Esri提供了在线版本的&lt;a href=&quot;https://developers.arcgis.com/javascript/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ArcGIS API For JavaScript&lt;/a&gt;，方便开发者调用。但在有些
      
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="ArcGIS API For JavaScript" scheme="http://yoursite.com/tags/ArcGIS-API-For-JavaScript/"/>
    
      <category term="本地部署" scheme="http://yoursite.com/tags/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/"/>
    
      <category term="跨域" scheme="http://yoursite.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>Centos单机安装Portal</title>
    <link href="http://yoursite.com/2019/01/Centos%E5%8D%95%E6%9C%BA%E5%AE%89%E8%A3%85PortalForArcGIS/"/>
    <id>http://yoursite.com/2019/01/Centos单机安装PortalForArcGIS/</id>
    <published>2019-01-09T16:00:00.000Z</published>
    <updated>2019-03-13T02:29:21.252Z</updated>
    
    <content type="html"><![CDATA[<p>本篇博客简要介绍了如何在纯净的Centos机器上部署ArcGIS Server、ArcGIS Web Adaptor、ArcGIS DataStore和Portal for ArcGIS。在阅读本篇博客之前，您需要提前了解一些Linux系统的操作，比如使用命令行导航到某个文件夹、使用vi编辑文件等。</p><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><h3 id="配置Centos网卡"><a href="#配置Centos网卡" class="headerlink" title="配置Centos网卡"></a>配置Centos网卡</h3><p>如果在Centos虚拟机上安装Portal，常常用Xshell + Xftp组合工具进行安装。如果要使用Xshell连接虚拟机，需要确保Centos机器的网卡能正常访问，可通过命令<code>ip addr</code>查看Centos的IP地址。</p><p>如果Centos的IP地址能够访问，会得到下图的结果，可跳过此小节；反之，需要配置Centos的网卡。</p><p><img src="/2019/01/Centos单机安装PortalForArcGIS/查看IP地址-成功.png" alt="Centos查看IP地址结果"></p><p>配置Centos网卡流程如下：</p><ul><li><p>通过命令<code>cd /etc/sysconfig/network-scripts</code>导航到network-scripts文件夹</p></li><li><p>使用命令<code>vi ifcfg-ens*</code>编辑网络配置文件（*表示ens对面的文件名称，每台机器的情况可能不一样），设置<code>ONBOOT=yes</code>，保存，退出</p></li><li><p>使用命令<code>service network restart</code>，重启网卡</p></li><li><p>重启成功后，可通过命令<code>ip addr</code>查看Centos的IP地址</p></li></ul><h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><p>通过命令<code>vi /etc/hostname</code>编辑hostname文件，修改主机名。然后，保存，退出，重启机器。重启后，可通过命令<code>cat /etc/hostname</code>查看主机名是否修改成功。</p><p><em><strong>注意：</strong></em></p><ol><li>ArcGIS Enterprise系列软件的安装不支持计算机中带下划线(_)的计算机，如果检测到下划线，安装程序无法继续。</li></ol><h3 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h3><p>使用命令<code>vi /etc/hosts</code>打开hosts文件，然后在文件的最后添加本机IP和本机的机器名，如<code>10.10.10.208 pmt01.esri.local</code>。</p><h3 id="添加ArcGIS用户"><a href="#添加ArcGIS用户" class="headerlink" title="添加ArcGIS用户"></a>添加ArcGIS用户</h3><p>使用命令<code>useradd arcgis</code>添加名为arcgis的用户，然后使用命令<code>passwd arcgis</code>为arcgis用户设置密码。</p><p><em><strong>注意：</strong></em></p><ol><li>ArcGIS Enterprise系列软件不支持以跟用户身份安装软件，否则软件将无法继续安装。</li></ol><h3 id="修改文件句柄和进程限制"><a href="#修改文件句柄和进程限制" class="headerlink" title="修改文件句柄和进程限制"></a>修改文件句柄和进程限制</h3><p>ArcGIS Server是一种密集型的服务器产品，许多数据格式都包含数以万计的文件，也就是说，在常用系统中，在任意给定的时间内可能会有树千或者数万个文件正被使用。如果文件句柄和进程数不足，安装请求可能会随机出现失败，从而导致系统停止运行。实际需要的文件句柄数和进程数取决于数据和正在运行的实例（线程/进程）的数据量。一般来讲，对于ArcGIS Server而言，设置文件句柄65535和进程限值25059可以确保系统保持运行。</p><p>Linux系统中对文件句柄及进程有软限制和硬限制。要确定硬限制，可使用命令ulimit -Hn -Hu；要确定软限制，可使用命令ulimit -Sn -Su。如果要修改软限制和硬限制，在root账户下，通过命令<code>vi /etc/security/limits.conf</code>打开limits.conf，在此文件的末尾添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arcgis soft nofile 65536</span><br><span class="line">arcgis hard nofile 65536</span><br><span class="line">arcgis soft nproc 25059</span><br><span class="line">arcgis hard nproc 25059</span><br></pre></td></tr></table></figure><p>保存，退出，然后切换到arcgis用户，使用如下命令查看此配置是否成功。</p><p><img src="/2019/01/Centos单机安装PortalForArcGIS/查看句柄是否修改成功.png" alt="查看句柄是否修改成功"></p><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p>使用命令<code>systemctl stop firewalld</code>关闭防火墙，然后使用命令<code>systemctl disable firewalld</code>禁止防火墙开机启动。</p><h2 id="安装并配置Java环境"><a href="#安装并配置Java环境" class="headerlink" title="安装并配置Java环境"></a>安装并配置Java环境</h2><p>Centos系统中安装并配置Java环境很方便，可通过以下步骤完成：</p><ul><li><p>通过Xftp工具将JDK的安装包传输到Centos系统中，然后使用命令<code>tar -xzvf jdk-8u191-linux-x64.tar.gz</code>解压</p></li><li><p>将解压后的文件夹移动到/usr/local文件夹下，使用的命令为<code>mv jdk1.8.0_191/ /usr/loca</code></p></li><li><p>使用命令<code>vi /etc/profile</code>编辑profile文件，在文件的最后添加如下内容，然后保存，退出，使用命令<code>source /etc/profile</code>使修改的环境变量生效</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_191</span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">export CLASSPATH=export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib </span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><ul><li>使用命令<code>java -version</code>判断Java环境是否生效，如果显示Java的版本，则表示Java的环境配置成功。</li></ul><h2 id="安装并配置Tomcat环境"><a href="#安装并配置Tomcat环境" class="headerlink" title="安装并配置Tomcat环境"></a>安装并配置Tomcat环境</h2><p>Centos系统中安装、配置Tomcat环境也比较方便，可通过以下步骤完成：</p><ul><li><p>通过Xftp工具将Tomcat的安装包传输到Centos系统中，使用命令<code>tar -xzvf apache-tomcat-9.0.14.tar.gz</code>解压tomcat压缩包</p></li><li><p>使用命令<code>mv apache-tomcat-9.0.14/ /usr/local/</code>将解压后的压缩包拷贝到/usr/local文件夹下</p></li><li><p>使用命令<code>vi /usr/local/apache-tomcat-9.0.14/bin/setclasspath.sh</code>打开文件，然后在下图的位置添加JAVA_HOME和JRE_HOME</p></li></ul><p><img src="/2019/01/Centos单机安装PortalForArcGIS/Tomcat配置JDK.png" alt="Tomcat配置JDK"></p><ul><li>使用命令<code>vi /usr/lib/systemd/system/tomcat.service</code>创建tomcat.service文件，输入以下内容，然后保存文件，退出</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=tomcat</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=/usr/local/apache-tomcat-9.0.14/bin/startup.sh</span><br><span class="line">ExecStop=/usr/local/apache-tomcat-9.0.14/bin/shutdown.sh</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li><p>使用命令<code>systemctl enable tomcat.service</code>将tomcat服务添加到开机自启动中</p></li><li><p>使用命令<code>systemctl start tomcat</code>启动tomcat服务；使用命令<code>systemctl stop tomcat</code>停止tomcat服务</p></li></ul><h2 id="配置HTTPS服务"><a href="#配置HTTPS服务" class="headerlink" title="配置HTTPS服务"></a>配置HTTPS服务</h2><ul><li>在root账号下，使用命令<code>keytool -genkey -alias tomcat -keyalg RSA -validity 36500 -keystore /usr/local/apache-tomcat-9.0.14/tomcat.keystore -keysize 2048</code>创建证书，配置如下:</li></ul><p><img src="/2019/01/Centos单机安装PortalForArcGIS/配置证书.png" alt="创建证书时的配置"></p><ul><li>使用命令<code>vi /usr/local/apache-tomcat-9.0.14/conf/server.xml</code>编辑tomcat的配置文件</li></ul><p><img src="/2019/01/Centos单机安装PortalForArcGIS/Tomcat配置HTTPS.png" alt="Tomcat配置Https"></p><ul><li>重启tomcat服务，然后在浏览器中可使用https+ip地址访问</li></ul><h2 id="安装ArcGIS-WebAdaptor"><a href="#安装ArcGIS-WebAdaptor" class="headerlink" title="安装ArcGIS WebAdaptor"></a>安装ArcGIS WebAdaptor</h2><ul><li><p>将ArcGIS WebAdaptor安装包拷贝到arcgis用户可访问的文件夹中，例如/home/arcgis，也可以使用命令<code>chown -R arcgis /gis</code>将给arcgis账户赋予gis文件夹的读写权限</p></li><li><p>切换到arcgis账户，使用命令<code>tar -xzvf Web_Adaptor_Java_Linux_1061_9226.tar.gz</code>解压WebAdaptor安装包</p></li><li><p>导航至WebAdaptor解压后的文件夹，然后使用命令<code>./Setup -m silent -l yes</code>安装WebAdaptor</p></li><li><p>切换到root账户，使用命令<code>cp /home/arcgis/webadaptor10.6.1/java/arcgis.war /usr/local/apache-tomcat-9.0.14/webapps/</code>，将arcgis.war包拷贝到tomcat的webapp文件夹中</p></li></ul><h2 id="安装并配置ArcGIS-Server"><a href="#安装并配置ArcGIS-Server" class="headerlink" title="安装并配置ArcGIS Server"></a>安装并配置ArcGIS Server</h2><h3 id="安装ArcGIS-Server"><a href="#安装ArcGIS-Server" class="headerlink" title="安装ArcGIS Server"></a>安装ArcGIS Server</h3><ul><li><p>切换到arcgis账户，然后使用命令<code>tar -xzvf ArcGIS_Server_Linux_1061_9226.tar.gz</code>解压ArcGIS Server安装包</p></li><li><p>导航至Server解压后的文件夹，使用命令<code>./Setup -m silent -l yes -a *.ecp</code>安装ArcGIS Server</p></li><li><p>安装成功，在浏览器访问ArcGIS Manager页面，创建用户</p></li></ul><p>安装参数描述：</p><ol><li>-m：安装模式，可选项有silent(静默)、console(控制台)和GUI，默认为GUI</li><li>-l：许可协议，yes表示已阅读并同意Esri主协议</li><li>-a：授权文件，可选，如果此时未选择，则需要在安装后对软件进行授权</li><li>-d：安装目录，可选，默认情况下安装到$HOME/用户名目录下</li><li>-v：安装程序在详细模式下运行</li><li>-h：帮助，显示命令行帮助</li><li>-e：示例，显示这些选项的使用说明示例并退出</li></ol><h3 id="WebAdaptor注册Server"><a href="#WebAdaptor注册Server" class="headerlink" title="WebAdaptor注册Server"></a>WebAdaptor注册Server</h3><ul><li><p>使用命令<code>cd /home/arcgis/webadaptor10.6.1/java/tools/</code>导航到WebAdaptor文件夹</p></li><li><p>使用命令<code>./configurewebadaptor.sh -m server -w https://pmt02.esri.local/arcgis/webadaptor -g https://pmt02.esri.local:6443 -u siteadmin -p admin -a true</code>注册Server</p></li></ul><h3 id="配置ArcGIS-Server开机自启动"><a href="#配置ArcGIS-Server开机自启动" class="headerlink" title="配置ArcGIS Server开机自启动"></a>配置ArcGIS Server开机自启动</h3><ul><li><p>切换到root账号，使用命令<code>cp /home/arcgis/server/framework/etc/scripts/arcgisserver.service /etc/systemd/system</code>将arcgisserver.service复制到system文件夹下</p></li><li><p>导航到system文件夹，使用命令<code>systemctl enable arcgisserver.service</code>配置ArcGIS Server开机自启动</p></li></ul><h2 id="安装并配置ArcGIS-DataStore"><a href="#安装并配置ArcGIS-DataStore" class="headerlink" title="安装并配置ArcGIS DataStore"></a>安装并配置ArcGIS DataStore</h2><h3 id="安装ArcGIS-DataStore"><a href="#安装ArcGIS-DataStore" class="headerlink" title="安装ArcGIS DataStore"></a>安装ArcGIS DataStore</h3><ul><li><p>切换到arcgis账户，然后使用命令<code>tar -xzvf ArcGIS_DataStore_Linux_1061_9226.tar.gz</code>解压ArcGIS DataStore安装包</p></li><li><p>导航至DataStore解压后的文件夹，使用命令<code>./Setup -m silent -l yes</code>安装ArcGIS DataStore</p></li></ul><h3 id="DataStore注册Server"><a href="#DataStore注册Server" class="headerlink" title="DataStore注册Server"></a>DataStore注册Server</h3><ul><li><p>使用命令<code>cd /home/arcgis/arcgis/datastore/tools/</code>进入tools文件夹</p></li><li><p>使用命令<code>./configuredatastore.sh https://pmt02.esri.local:6443/arcgis/admin siteadmin admin /home/arcgis/arcgis/datastore/usr/ --stores relational</code>注册关系DataStore</p></li><li><p>使用命令<code>./configuredatastore.sh https://pmt01.esri.local:6443/arcgis/admin siteadmin admin /home/arcgis/arcgis/datastore/usr/ --stores spatiotemporal</code>注册时空DataStore</p></li></ul><h3 id="配置ArcGIS-DataStore开机自启动"><a href="#配置ArcGIS-DataStore开机自启动" class="headerlink" title="配置ArcGIS DataStore开机自启动"></a>配置ArcGIS DataStore开机自启动</h3><ul><li><p>切换到root账号，使用命令<code>cp /home/arcgis/arcgis/datastore/framework/etc/scripts/arcgisdatastore.service /etc/systemd/system</code>复制到system文件夹下</p></li><li><p>导航至system文件夹，使用命令<code>systemctl enable arcgisdatastore.service</code>配置ArcGIS Server开机自启动</p></li></ul><h2 id="安装并配置Portal-for-ArcGIS"><a href="#安装并配置Portal-for-ArcGIS" class="headerlink" title="安装并配置Portal for ArcGIS"></a>安装并配置Portal for ArcGIS</h2><h3 id="安装Portal-for-ArcGIS"><a href="#安装Portal-for-ArcGIS" class="headerlink" title="安装Portal for ArcGIS"></a>安装Portal for ArcGIS</h3><ul><li><p>切换到arcgis账号，然后使用命令<code>tar -xzvf Portal_for_ArcGIS_Linux_1061_9226.tar.gz</code>解压Portal安装包</p></li><li><p>导航至Portal解压后的文件夹，然后使用命令<code>./Setup -m silent -l yes -a /gis/PortalforArcGIS.ecp</code>安装Portal</p></li><li><p>使用命令<code>cd /home/arcgis/arcgis/portal/tools/createportal</code>切换到Portal的createportal文件夹，然后使用命令<code>./createportal.sh -fn XN -ln Jiao -u esri02 -p 12345678 -e *@qq.com -qi 1 -qa xingtai -d /home/arcgis/arcgis/portal/usr/arcgisportal/content/</code>创建Portal账户</p></li></ul><h3 id="WebAdaptor注册Portal"><a href="#WebAdaptor注册Portal" class="headerlink" title="WebAdaptor注册Portal"></a>WebAdaptor注册Portal</h3><ul><li><p>使用命令<code>cd /home/arcgis/webadaptor10.6.1/java/tools/</code>导航到WebAdaptor文件夹</p></li><li><p>输入命令<br><code>./configurewebadaptor.sh -m portal -w https://pmt02.esri.local/arcgis/webadaptor -g https://pmt02.esri.local:7443 -u esri01 -p 12345678</code>为WebAdaptor注册Portal</p></li></ul><h3 id="Portal联合、托管Server"><a href="#Portal联合、托管Server" class="headerlink" title="Portal联合、托管Server"></a>Portal联合、托管Server</h3><p>使用浏览器访问Portal，登录成功后，依次点击<em>Organization</em>、<em>EDIT</em> <em>SETTINGS</em>、<em>Servers</em>打开Server配置界面，然后点击<em>ADD SERVER</em>，然后按照提示依次输入如下的配置内容</p><p><img src="/2019/01/Centos单机安装PortalForArcGIS/Portal联合Server.png" alt="Portal联合Server"></p><p>在Server配置界面中，在Hosting Server配置中，选择刚刚添加的ArcGIS Server服务器，然后点击SAVE，保存配置。</p><h3 id="配置Portal开机自启动"><a href="#配置Portal开机自启动" class="headerlink" title="配置Portal开机自启动"></a>配置Portal开机自启动</h3><ul><li><p>切换到root账号，使用命令<code>cp /home/arcgis/arcgis/portal/framework/etc/arcgisportal.service /etc/systemd/system</code>复制到system文件夹下</p></li><li><p>导航至system文件夹，使用命令<code>systemctl enable arcgisportal.service</code>配置Portal开机自启动</p></li></ul><h2 id="参考信息"><a href="#参考信息" class="headerlink" title="参考信息"></a>参考信息</h2><ul><li><p><a href="https://enterprise.arcgis.com/zh-cn/portal/latest/install/linux/welcome-to-the-portal-for-arcgis-installation-guide.htm" target="_blank" rel="noopener">Portal官方安装教程</a></p></li><li><p><a href="https://enterprise.arcgis.com/zh-cn/server/latest/install/linux/welcome-to-the-arcgis-for-server-install-guide.htm" target="_blank" rel="noopener">Server官方安装教程</a></p></li><li><p><a href="https://enterprise.arcgis.com/zh-cn/web-adaptor/latest/install/java-linux/welcome-arcgis-web-adaptor-install-guide.htm" target="_blank" rel="noopener">WebAdaptor官方安装教程</a></p></li><li><p><a href="https://enterprise.arcgis.com/zh-cn/data-store/latest/install/linux/welcome-to-arcgis-data-store-installation-guide.htm" target="_blank" rel="noopener">DataStore官方安装教程</a></p></li><li><p><a href="https://jingyan.baidu.com/article/bea41d43aab3e6b4c51be6b4.html" target="_blank" rel="noopener">Linux vi操作命令简介</a></p></li><li><p><a href="https://blog.csdn.net/u013118258/article/details/79300450" target="_blank" rel="noopener">Linux 切换用户命令</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇博客简要介绍了如何在纯净的Centos机器上部署ArcGIS Server、ArcGIS Web Adaptor、ArcGIS DataStore和Portal for ArcGIS。在阅读本篇博客之前，您需要提前了解一些Linux系统的操作，比如使用命令行导航到某个文
      
    
    </summary>
    
      <category term="软件安装" scheme="http://yoursite.com/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="Portal" scheme="http://yoursite.com/tags/Portal/"/>
    
      <category term="Centos" scheme="http://yoursite.com/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>年度个人工作总结模板</title>
    <link href="http://yoursite.com/2019/01/%E4%B8%AA%E4%BA%BA%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93%E6%A8%A1%E6%9D%BF/"/>
    <id>http://yoursite.com/2019/01/个人工作总结模板/</id>
    <published>2019-01-01T16:00:00.000Z</published>
    <updated>2019-03-13T02:29:38.257Z</updated>
    
    <content type="html"><![CDATA[<p>2018年是我参加工作的第一年，到了年终要写第一篇年度个人工作总结，在网上找到了一个比较不错的<a href="https://jingyan.baidu.com/article/fd8044fa2ce0f15030137a6c.html" target="_blank" rel="noopener">模板</a>，跟大家分享一下。</p><h2 id="定个大调"><a href="#定个大调" class="headerlink" title="定个大调"></a>定个大调</h2><p>工作了一年，个人年度总结报告一方面给单位领导汇报一年来的工作、学习情况，另一方面也可以借此机会总结一下自己（哪些得、哪些失），所以还是需要认真对待。</p><h2 id="总结原则"><a href="#总结原则" class="headerlink" title="总结原则"></a>总结原则</h2><h3 id="总结要全"><a href="#总结要全" class="headerlink" title="总结要全"></a>总结要全</h3><p>总结主要分两大部分，第一部分是总结，第二部分是特点。</p><p>总结要全面，把各级领导的关心、兄弟部门的支持、员工的努力和部门的主要工作要写全面，但一般不超过5点。</p><p>特点是本年度、本文的精彩之处，与往年的不同之处，本部门的主要的、重点的成绩，一定要认真写好。特点一般不要超过3点，多了就不是特点了。</p><h3 id="不足要准"><a href="#不足要准" class="headerlink" title="不足要准"></a>不足要准</h3><p>一年工作中一定会存在一些问题、不足和遗憾，一定要找准写好。特别是要把领导认为存在的问题、员工感觉存在的问题和阻碍公司发展的主要问题要找准找对，深刻反省，写深写透，一般不超过3点。</p><h3 id="改进要实"><a href="#改进要实" class="headerlink" title="改进要实"></a>改进要实</h3><p>针对成绩、特点和不足、问题，明年应该怎么办？这点一定要写好。要有具体的办法和措施、步骤，要事先征求领导和员工的意见，本部门要组织好学习和讨论，制定出的改进计划要得到领导的中肯和员工的认可（小部门总结可写简单些）。</p><h2 id="梳理：梳理一年中自己做了什么"><a href="#梳理：梳理一年中自己做了什么" class="headerlink" title="梳理：梳理一年中自己做了什么"></a>梳理：梳理一年中自己做了什么</h2><h3 id="四字梳理法"><a href="#四字梳理法" class="headerlink" title="四字梳理法"></a>四字梳理法</h3><ul><li>纵：从时间上梳理</li><li>横：从事件上梳理</li><li>大：从大事上梳理</li><li>新：从创新（亮点）上梳理</li></ul><p>其中，“纵”、“横”梳理是基础梳理，“大”、“新”梳理是上层梳理，真正写进总结报告的事情，主要是大的事情和富有创新亮点的事情。</p><h3 id="问题梳理法"><a href="#问题梳理法" class="headerlink" title="问题梳理法"></a>问题梳理法</h3><ul><li>今年参与了哪些项目</li><li>今年完成了哪些课题</li><li>今年组织了哪些活动</li><li>今年取得了怎样的业绩</li></ul><h3 id="维度梳理法"><a href="#维度梳理法" class="headerlink" title="维度梳理法"></a>维度梳理法</h3><ul><li>工作内容：做了什么，哪些是琐事，哪些是里程碑事件，琐事用统计，里程碑事件则重点描述</li><li>工作方法：通过怎样的方法提升了工作效率</li><li>资源整合：实现了哪些跨部门、跨公司资源的系统</li><li>团队协作：在事件中扮演的是什么角色，领导者还是参与者？提供了怎样的贡献？</li><li>特殊技能：是否有意识提升自己？（不一定是为了工作，更是为了更全面的自己）</li><li>人际关系：认识了哪些有意思、有能量的人</li><li>不足之处：针对以上，有哪些不足，如歌进行对标，找到解决方案</li></ul><h2 id="套模板"><a href="#套模板" class="headerlink" title="套模板"></a>套模板</h2><p>在完成上述梳理之后，就可以套用模板了，内容如下：</p><ul><li>标题</li></ul><p>将主要内容、性质作标题，如不能表达出完整的意思，在正标题下可以在拟副标题。</p><ul><li>前言</li></ul><p>前言写法多种多样，有的概述变化情况及主要成绩，有的介绍基本情况，有的概述总结的目的、方法等等，开头少，求简洁，起到开宗明义的作用。</p><ul><li>主体</li></ul><p>一般叙述总结事件的过程、做法、体会、经验、教训，并且要做理论的概括，总结出规律性的东西，这是总结的核心部分，可按纵式或者横式结构形式撰写。</p><p>纵式结构，即按主体内容纵向所做的工作、方法、成绩、经验、教训等逐层展开。</p><p>横式结果，即按材料的逻辑关系将其分成若干部分，标序加题，逐一写来。</p><ul><li>结尾</li></ul><p>或提出今后努力方向，或指出存在的问题，或表示自己的态度。总结常见的结构形式：条目式、三段式、分项式、漫谈式。</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h3 id="关注业绩"><a href="#关注业绩" class="headerlink" title="关注业绩"></a>关注业绩</h3><p>不能写流水账，在内容上必须进行有效地选取和整理，整理一个或几个核心事件来贯穿和体现业绩。</p><h3 id="图标分析"><a href="#图标分析" class="headerlink" title="图标分析"></a>图标分析</h3><p>尽量多用个案、表格、图示，做类比、对比，以量化数据分析或文字说明的方式来展示成绩。</p><h3 id="核心客套话"><a href="#核心客套话" class="headerlink" title="核心客套话"></a>核心客套话</h3><p>年终总结的客套话也是需要的，基本包括以下6点：</p><ul><li>公司文化好，我很高兴</li><li>领导魅力大，我和喜悦</li><li>同事业务精，我很开心</li><li>团队氛围好，我和快乐</li><li>客户巨认可，我很幸福</li><li>前途好光明，我很祥和</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2018年是我参加工作的第一年，到了年终要写第一篇年度个人工作总结，在网上找到了一个比较不错的&lt;a href=&quot;https://jingyan.baidu.com/article/fd8044fa2ce0f15030137a6c.html&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="随记" scheme="http://yoursite.com/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="个人工作总结" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Windows系统下定时执行Python程序</title>
    <link href="http://yoursite.com/2018/12/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8CPython%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2018/12/Windows系统下定时执行Python程序/</id>
    <published>2018-12-26T16:00:00.000Z</published>
    <updated>2019-03-13T02:33:19.134Z</updated>
    
    <content type="html"><![CDATA[<p>在Windows服务器上部署Python脚本时，有时希望每隔一段时间运行一次脚本（如爬虫类程序），有时希望脚本一致运行（如Flask类的应用），对于这类的问题，可通过设置任务计划程序来实现。</p><p>以Windows Server 2016操作系统为例，介绍如何配置任务计划程序每隔1小时运行一次Python脚本：</p><h2 id="打开任务计划窗口"><a href="#打开任务计划窗口" class="headerlink" title="打开任务计划窗口"></a>打开任务计划窗口</h2><p>在搜索Windows窗口中，搜索任务计划程序，打开该窗口</p><p><img src="/2018/12/Windows系统下定时执行Python程序/任务计划程序主窗口.png" alt="任务计划程序主窗口"></p><h2 id="创建并配置任务"><a href="#创建并配置任务" class="headerlink" title="创建并配置任务"></a>创建并配置任务</h2><h3 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h3><p>点击窗口右上角的创建任务按钮，打开任务向导窗口，然后在该窗口的常规选项卡中设置任务名称和任务描述，其余配置可以默认</p><p><img src="/2018/12/Windows系统下定时执行Python程序/创建基本任务.png" alt="任务计划程序主窗口"></p><h3 id="配置任务触发器"><a href="#配置任务触发器" class="headerlink" title="配置任务触发器"></a>配置任务触发器</h3><p>点击触发器选项卡，然后点击新建按钮，设置触发任务执行的时间。这里选择“一次”并配置任务执行的时间。如果设置的时间为2018/12/28 10:05:00，则程序只会在2018/12/28 10:05:00启动一次，当然也可以手动启动此程序。然后，勾选重复任务间隔，设置时间为1小时，持续时间为无限期。其余配置保持默认即可。这样配置后，此程序会在每个小时的5分启动，任务执行完成后，程序自动结束。点击确定返回任务配置界面。</p><p><img src="/2018/12/Windows系统下定时执行Python程序/配置任务触发器.png" alt="任务计划程序主窗口"></p><h3 id="配置任务操作"><a href="#配置任务操作" class="headerlink" title="配置任务操作"></a>配置任务操作</h3><p>点击操作选项卡，然后点击新建按钮，设置任务执行的操作。这里选择“启动程序”，因为要执行Python脚本并且Python脚本执行时不打算显示命令行窗口，选择程序为pythow.exe，可通过点击浏览定位到此文件，例如：C:\Users\Administrator\AppData\Local\Programs\Python\Python36\pythonw.exe；参数为要执行的.py文件名称，例如：main.py；起始于选择.py文件所在的文件夹路径，如：C:\Users\Administrator\Desktop。</p><p><img src="/2018/12/Windows系统下定时执行Python程序/配置任务操作.png" alt="任务计划程序主窗口"></p><h3 id="配置任务条件"><a href="#配置任务条件" class="headerlink" title="配置任务条件"></a>配置任务条件</h3><p>可根据自己的应用情况配置，基本上保持默认配置即可。</p><h3 id="配置任务设置"><a href="#配置任务设置" class="headerlink" title="配置任务设置"></a>配置任务设置</h3><p>可根据自己的应用情况配置，基本上保持默认配置即可。</p><h2 id="启动任务"><a href="#启动任务" class="headerlink" title="启动任务"></a>启动任务</h2><p>配置任务后，可手动启动任务。首先，在任务列表中选中任务，然后点击窗口右侧的运行按钮即可执行此任务。</p><p><img src="/2018/12/Windows系统下定时执行Python程序/手动启动任务.png" alt="任务计划程序主窗口"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Windows服务器上部署Python脚本时，有时希望每隔一段时间运行一次脚本（如爬虫类程序），有时希望脚本一致运行（如Flask类的应用），对于这类的问题，可通过设置任务计划程序来实现。&lt;/p&gt;
&lt;p&gt;以Windows Server 2016操作系统为例，介绍如何配置任
      
    
    </summary>
    
      <category term="软件操作" scheme="http://yoursite.com/categories/%E8%BD%AF%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Windows" scheme="http://yoursite.com/tags/Windows/"/>
    
      <category term="定时" scheme="http://yoursite.com/tags/%E5%AE%9A%E6%97%B6/"/>
    
  </entry>
  
  <entry>
    <title>Centos离线安装Python</title>
    <link href="http://yoursite.com/2018/12/Centos%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85Python/"/>
    <id>http://yoursite.com/2018/12/Centos离线安装Python/</id>
    <published>2018-12-24T16:00:00.000Z</published>
    <updated>2019-03-13T02:32:35.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载Centos离线安装Python所需的软件包"><a href="#下载Centos离线安装Python所需的软件包" class="headerlink" title="下载Centos离线安装Python所需的软件包"></a>下载Centos离线安装Python所需的软件包</h2><p>这里给大家提供了一个百度网盘的链接（链接：<a href="https://pan.baidu.com/s/1RBmPcHim2OWbwNtY3XzlSw" target="_blank" rel="noopener">https://pan.baidu.com/s/1RBmPcHim2OWbwNtY3XzlSw</a> ，提取码：ovjm），里面包括离线安装Python所需的gcc、python源包、python依赖包等内容。下载完成后，解压，然后拷贝到Centos机器中，以下内容假设您将加压后的文件夹存放到/root/softwares。</p><p>Centos版本为Centos 7.6 ×64</p><h2 id="安装gcc环境"><a href="#安装gcc环境" class="headerlink" title="安装gcc环境"></a>安装gcc环境</h2><ul><li>使用命令<code>cd /root/softwares/01-gcc</code>进入gcc文件夹</li><li>使用命令<code>rpm -Uvh *.rpm --nodeps --force</code>安装该文件夹下的rpm包</li><li>安装完成后，输入命令<code>gcc -v</code>，如果得到gcc的版本表示安装成功</li></ul><h2 id="使用gcc编译Python源代码"><a href="#使用gcc编译Python源代码" class="headerlink" title="使用gcc编译Python源代码"></a>使用gcc编译Python源代码</h2><h3 id="安装Python环境的依赖项"><a href="#安装Python环境的依赖项" class="headerlink" title="安装Python环境的依赖项"></a>安装Python环境的依赖项</h3><ul><li>使用命令<code>cd /root/softwares/05-python-dependency</code>进入05-python-dependency文件夹</li><li>使用命令<code>rpm -Uvh *.rpm --nodeps --force</code>安装该文件夹下的rpm包</li></ul><h3 id="解压Python源代码"><a href="#解压Python源代码" class="headerlink" title="解压Python源代码"></a>解压Python源代码</h3><ul><li>使用命令<code>cd /root/softwares/08-python-source</code>进入python-source文件夹</li><li>使用命令<code>tar -xvf Python-3.6.5.tar</code>解压Python源代码，加压成功后，python-source文件夹内会多一个名为Python-3.6.5的文件夹</li></ul><h3 id="编译Python源代码"><a href="#编译Python源代码" class="headerlink" title="编译Python源代码"></a>编译Python源代码</h3><ul><li>使用命令<code>cd /root/softwares/08-python-source/Python-3.6.5</code>进入Python-3.6.5文件夹</li><li>使用命令<code>./configure --prefix=/usr/local/python3.6 --enable-optimizations</code>配置编译选项，其中<code>--prefix</code>指定预期安装目录，<code>--enable-optimizations</code>是优化选项，如果加上这个参数，Python的性能会有10%的提高，但是也会增加编译时间</li><li>使用命令<code>make</code>编译Python源代码</li><li>使用命令<code>make install</code>安装Python，安装完成后在<code>/usr/local/</code>会新增一个名为<code>python3</code>的文件夹，这个文件夹是python的安装目录</li><li>使用命令<code>ln -s /usr/local/python3/bin/python3 /usr/bin/python3</code>为Centos配置python的全局环境</li><li>在Centos的Terminal窗口中，输入命令<code>python3 -V</code>，如果显示Python的版本3.6.5表示Python全局环境配置成功</li></ul><h3 id="安装最新的pip"><a href="#安装最新的pip" class="headerlink" title="安装最新的pip"></a>安装最新的pip</h3><p>Python编译、安装成功后，会自动安装pip，但不是最新版本的pip。如果您不想更新pip，到这一步Centos离线部署Python已经完成了；如果想更新pip，您可以继续浏览。</p><ul><li>更新pip需要提前安装setuptools，使用命令<code>cd /root/softwares/08-setuptools/setuptools-40.6.2</code>进入setuptools-40.6.2文件夹</li><li>使用命令<code>python3 setup.py install</code>安装/更新setuptools</li><li>使用命令<code>cd /root/softwares/04-pip</code>进入04-pip文件夹</li><li>使用命令<code>tar -xzvf pip-18.1.tar.gz</code>解压pip的压缩包</li><li>使用命令<code>cd pip-18.1/`</code>进入pip-18.1文件夹</li><li>使用命令<code>python3 setup.py install</code>更新pip</li><li>更新完成后，使用命令<code>pip -V</code>查看pip的版本</li></ul><p>至此，Centos离线安装python已经完成，希望这篇文章对您有所帮助！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载Centos离线安装Python所需的软件包&quot;&gt;&lt;a href=&quot;#下载Centos离线安装Python所需的软件包&quot; class=&quot;headerlink&quot; title=&quot;下载Centos离线安装Python所需的软件包&quot;&gt;&lt;/a&gt;下载Centos离线安装Py
      
    
    </summary>
    
      <category term="软件安装" scheme="http://yoursite.com/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="Centos" scheme="http://yoursite.com/tags/Centos/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="离线" scheme="http://yoursite.com/tags/%E7%A6%BB%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>Centos使用Nginx+Supervisor离线部署Flask应用</title>
    <link href="http://yoursite.com/2018/12/Centos%E4%BD%BF%E7%94%A8Nginx+Supervisor%E7%A6%BB%E7%BA%BF%E9%83%A8%E7%BD%B2Flask%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2018/12/Centos使用Nginx+Supervisor离线部署Flask应用/</id>
    <published>2018-12-24T16:00:00.000Z</published>
    <updated>2019-03-13T02:32:59.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Centos部署Python环境"><a href="#Centos部署Python环境" class="headerlink" title="Centos部署Python环境"></a>Centos部署Python环境</h2><p>部署Flask应用需要提前配置Python环境，如果您的Centos机器中没有Python环境，可以参考我的另外一篇博客《Centos离线安装Python》，在Centos中离线部署Python环境。</p><h2 id="安装Flask应用所需的Python库"><a href="#安装Flask应用所需的Python库" class="headerlink" title="安装Flask应用所需的Python库"></a>安装Flask应用所需的Python库</h2><p>这一步的安装，有以下假设：</p><ul><li>假设您已经下载了Flask应用所需的Python库，并存放在Centos机器的<code>/root/softwares/06-python-packages</code>文件夹中；如果没有，您可以从我的百度网盘链接中下载（链接：<a href="https://pan.baidu.com/s/1RBmPcHim2OWbwNtY3XzlSw" target="_blank" rel="noopener">https://pan.baidu.com/s/1RBmPcHim2OWbwNtY3XzlSw</a> ，提取码：ovjm）。如果我提供的Python库不能满足您的需求，您可以把下载后的Python库存放在06-python-packages文件夹中</li><li>假设您的Flask应用有requirements.txt文件存储Flask应用所需的Python库；如果通过命令<code>pip freeze &gt; requirements.txt</code>导出Flask应用依赖的库至requirements.txt文件。</li></ul><p>以上的假设，如果都满足了，可以开始安装Flaks应用依赖的Python库。</p><ul><li>在Centos中，使用命令进入Flask应用的根目录</li><li>使用命令<code>pip install --no-index --find-links=/root/softwares/06-python-packages/ -r requirements.txt</code>安装Python库</li></ul><h2 id="安装、配置supervisor"><a href="#安装、配置supervisor" class="headerlink" title="安装、配置supervisor"></a>安装、配置supervisor</h2><h3 id="安装supervisor"><a href="#安装supervisor" class="headerlink" title="安装supervisor"></a>安装supervisor</h3><ul><li>使用命令<code>cd /root/softwares/09-supervisor</code>进入09-supervisor文件夹</li><li>使用命令<code>rpm -Uvh *.rpm --nodeps --force</code>安装supervisor</li></ul><h3 id="为Flask配置supervisor"><a href="#为Flask配置supervisor" class="headerlink" title="为Flask配置supervisor"></a>为Flask配置supervisor</h3><ul><li>使用命令<code>echo_supervisord_conf &gt; /etc/supervisord.d/flask.conf</code>创建flask.conf文件</li><li>使用命令<code>vi /etc/supervisord.d/flask.conf</code>打开该文件，并在此文件的最下方添加以下内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[program:yngt]</span><br><span class="line">command=python3 manage.py runserve</span><br><span class="line">directory=/root/resources_directory_tree/server</span><br><span class="line">startsecs=1</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br></pre></td></tr></table></figure><p>相关的配置选项的意思如下：</p><ul><li><code>yngt</code>表示supervisor子进程的名称</li><li><code>directory</code>表示脚本目录</li><li><code>command</code>表示脚本执行的命令</li><li><code>startsecs</code>表示子进程启动多少秒之后，如果其状态为RUNNING，则supervisor认为其已经启动</li><li><code>autostart</code>表示子进程会随着supervisor启动而启动</li><li><code>autorestart</code>表示如果子进程如果异常退出后，是否会自动重启，共有true、false和unexpected，其中unexpected表示如果子进程的退出码不再exitcodes里定义的退出码时，才会自动重启</li></ul><p>更多的配置选项请查看 <a href="https://wuguiyunwei.com/index.php/2017/06/26/1028.html" target="_blank" rel="noopener">https://wuguiyunwei.com/index.php/2017/06/26/1028.html</a></p><h3 id="启动supervisor子进程"><a href="#启动supervisor子进程" class="headerlink" title="启动supervisor子进程"></a>启动supervisor子进程</h3><ul><li>使用命令<code>supervisord -c /etc/supervisord.d/flask.conf</code>初始化supervisor</li><li>使用命令<code>supervisorctl -c /etc/supervisord.d/flask.conf</code> 进入supervisorctl命令管理界面</li><li>使用命令<code>start yngt</code>启动子进程，其中yngt表示上一步配置中的子进程名称</li><li>如果Centos重启后，子进程没有自动启动，请重复这一步操作</li></ul><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><ul><li>使用命令<code>cd /root/softwares/03-nginx</code>进入03-nginx文件夹</li><li>使用命令<code>tar -xzvf nginx-1.14.2.tar.gz</code>解压，然后<code>cd nginx-1.14.2/</code>进入nginx-1.14.2文件夹</li><li>使用命令<code>./configure --prefix=/usr/local/nginx</code>配置nginx的编译选项，其中prefix指定了安装路径</li><li>使用命令<code>make</code>编译nginx源代码</li><li>使用命令<code>make install</code>安装编译后的nginx</li><li>使用命令<code>ln -s /usr/local/nginx/sbin/nginx /usr/bin/nginx</code>配置nginx可以全局访问</li><li>使用命令<code>nginx -v</code>，如果能够获取到nginx的版本，表示nginx安装成功</li></ul><h3 id="将nginx添加到系统服务"><a href="#将nginx添加到系统服务" class="headerlink" title="将nginx添加到系统服务"></a>将nginx添加到系统服务</h3><ul><li>使用命令<code>vi /etc/init.d/nginx</code>创建文件，并输入以下内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/bash</span><br><span class="line"># chkconfig: - 85 15</span><br><span class="line">PATH=/usr/local/nginx</span><br><span class="line">DESC=&quot;nginx daemon&quot;</span><br><span class="line">NAME=nginx</span><br><span class="line">DAEMON=$PATH/sbin/$NAME</span><br><span class="line">CONFIGFILE=$PATH/conf/$NAME.conf</span><br><span class="line">PIDFILE=$PATH/logs/$NAME.pid</span><br><span class="line">SCRIPTNAME=/etc/init.d/$NAME</span><br><span class="line">set -e</span><br><span class="line">[ -x &quot;$DAEMON&quot; ] || exit 0</span><br><span class="line">do_start() &#123;</span><br><span class="line">$DAEMON -c $CONFIGFILE || echo -n &quot;nginx already running&quot;</span><br><span class="line">&#125;</span><br><span class="line">do_stop() &#123;</span><br><span class="line">$DAEMON -s stop || echo -n &quot;nginx not running&quot;</span><br><span class="line">&#125;</span><br><span class="line">do_reload() &#123;</span><br><span class="line">$DAEMON -s reload || echo -n &quot;nginx can&apos;t reload&quot;</span><br><span class="line">&#125;</span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">start)</span><br><span class="line">echo -n &quot;Starting $DESC: $NAME&quot;</span><br><span class="line">do_start</span><br><span class="line">echo &quot;.&quot;</span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">echo -n &quot;Stopping $DESC: $NAME&quot;</span><br><span class="line">do_stop</span><br><span class="line">echo &quot;.&quot;</span><br><span class="line">;;</span><br><span class="line">reload|graceful)</span><br><span class="line">echo -n &quot;Reloading $DESC configuration...&quot;</span><br><span class="line">do_reload</span><br><span class="line">echo &quot;.&quot;</span><br><span class="line">;;</span><br><span class="line">restart)</span><br><span class="line">echo -n &quot;Restarting $DESC: $NAME&quot;</span><br><span class="line">do_stop</span><br><span class="line">do_start</span><br><span class="line">echo &quot;.&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;Usage: $SCRIPTNAME &#123;start|stop|reload|restart&#125;&quot; &gt;&amp;2</span><br><span class="line">exit 3</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><ul><li>使用命令<code>chmod a+x /etc/init.d/nginx</code>设置权限</li><li>使用命令<code>chkconfig --add nginx</code>注册成服务</li><li>使用命令<code>chkconfig nginx on</code>配置开机启动</li></ul><h3 id="为Flask应用配置nginx"><a href="#为Flask应用配置nginx" class="headerlink" title="为Flask应用配置nginx"></a>为Flask应用配置nginx</h3><ul><li>使用命令<code>vi /usr/local/nginx/conf/nginx.conf</code>打开nginx默认配置文件，修改server配置如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            proxy_pass http://127.0.0.1:5000;</span><br><span class="line">            proxy_set_header Host $host;        </span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>其中，proxy_pass和proxy_set_header是新增的配置，其余不变。</p><ul><li>使用命令<code>systemctl reload nginx.service</code>重新加载nginx配置文件</li><li>使用命令<code>nginx -t</code>，如果提示successful信息，表示nginx配置文件加载成功</li></ul><h3 id="nginx常用命令"><a href="#nginx常用命令" class="headerlink" title="nginx常用命令"></a>nginx常用命令</h3><ul><li><code>systemctl start nginx.service</code>，启动nginx服务</li><li><code>systemctl stop nginx.service</code>，停止nginx服务</li><li><code>systemctl restart nginx.service</code>，重启nginx服务</li><li><code>systemctl reload nginx.service</code>重新加载nginx配置文件</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>如果您想了解更多的关于nginx的内容，请查看以下链接：</p><ul><li>Nginx简介：<a href="https://blog.csdn.net/javalean/article/details/80083555" target="_blank" rel="noopener">https://blog.csdn.net/javalean/article/details/80083555</a></li><li>Nginx简介：<a href="https://blog.csdn.net/MrJavaweb/article/details/79635430" target="_blank" rel="noopener">https://blog.csdn.net/MrJavaweb/article/details/79635430</a></li><li>Nginx的介绍和使用：<a href="https://www.cnblogs.com/yaomajor/p/6272647.html" target="_blank" rel="noopener">https://www.cnblogs.com/yaomajor/p/6272647.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Centos部署Python环境&quot;&gt;&lt;a href=&quot;#Centos部署Python环境&quot; class=&quot;headerlink&quot; title=&quot;Centos部署Python环境&quot;&gt;&lt;/a&gt;Centos部署Python环境&lt;/h2&gt;&lt;p&gt;部署Flask应用需要提前配
      
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Centos" scheme="http://yoursite.com/tags/Centos/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
      <category term="Supervisor" scheme="http://yoursite.com/tags/Supervisor/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli 3使用vue-bootstrap-datetimepicker日期插件</title>
    <link href="http://yoursite.com/2018/11/vue-cli%203%20%E4%BD%BF%E7%94%A8vue-bootstrap-datetimepicker%E5%8A%A0%E8%BD%BD%E6%97%A5%E6%9C%9F%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/11/vue-cli 3 使用vue-bootstrap-datetimepicker加载日期插件/</id>
    <published>2018-11-15T16:00:00.000Z</published>
    <updated>2018-11-16T07:19:22.499Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求背景简介"><a href="#需求背景简介" class="headerlink" title="需求背景简介"></a>需求背景简介</h2><p>最近打算使用vue并结合前端工程化体系重构之前的一个Demo，其中有一个功能是使用bootstrap的datepicker插件选择查询日期。在网上找到了一个基于vue扩展的datepicker插件：<a href="https://www.npmjs.com/package/vue-bootstrap-datetimepicker" target="_blank" rel="noopener">vue-bootstrap-datepicker</a>。这篇博客主要介绍在使用vue-cli 3创建的项目中如何使用该插件。项目地址：<a href="https://gitlab.com/JiaoXN/vuecli3usedatetimepicker.git" target="_blank" rel="noopener">https://gitlab.com/JiaoXN/vuecli3usedatetimepicker.git</a></p><h2 id="安装插件及其依赖项"><a href="#安装插件及其依赖项" class="headerlink" title="安装插件及其依赖项"></a>安装插件及其依赖项</h2><p>这个插件有两个版本：一个是基于bootstrap 3.x开发的，一个是基于bootstrap 4.x开发的。本篇博客将会介绍后一种插件的安装及使用方法。</p><p>首先呢，需要安装插件的依赖项，包括bootstrap 4.x、jquery &gt;= 1.8.3、moment.js 2.22以及pc-bootstrap4-datetimepicker。</p><ul><li>安装bootstrap</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bootstrap@<span class="number">4.0</span><span class="number">.0</span> --save-dev</span><br></pre></td></tr></table></figure><ul><li>安装jquery</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jquery@<span class="number">3.3</span><span class="number">.1</span> --save-dev</span><br></pre></td></tr></table></figure><ul><li>安装moment</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install moment@<span class="number">2.22</span><span class="number">.2</span> --save-dev</span><br></pre></td></tr></table></figure><ul><li>安装pc-bootstrap4-datetimepicker</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pc-bootstrap4-datetimepicker@<span class="number">4.17</span><span class="number">.50</span> --save-dev</span><br></pre></td></tr></table></figure><p>或者直接设置package.json，然后通过npm install安装。 package.json配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line"><span class="string">"pc-bootstrap4-datetimepicker"</span>: <span class="string">"^4.17.50"</span>,</span><br><span class="line"><span class="string">"moment"</span>: <span class="string">"^2.22.2"</span>,</span><br><span class="line"><span class="string">"jquery"</span>: <span class="string">"^3.3.1"</span>,</span><br><span class="line"><span class="string">"bootstrap"</span>: <span class="string">"4.0.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后安装vue-bootstrap-datetimepicker，安装方法与上述依赖项安装一致。</p><h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><p>由于vue-bootstrap-datetimepicker这个插件的原始版本是基于Bootstrap 3.x版本开发的，后来为了适应Bootstrap 4.x，有人对其进行了拓展（此时pc-bootstrap4-datetimepicker可以看做Bootstrap 4.x的补丁），但是如果直接使用这个插件默认的图标（类似于时间图标或者日期图标）均显示不出来，因此还需要一下配置。</p><p>出现上述问题的原因在于Bootstrap 4.x删除了glyphicon图标，所以呢，首先需要安装fortawesome插件，安装方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @fortawesome/fontawesome-free@<span class="number">5.5</span><span class="number">.0</span> --save-dev</span><br></pre></td></tr></table></figure><p>然后在使用datetimepicker这个插件的Vue文件中使用一下代码配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@fortawesome/fontawesome-free/css/all.css'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">...</span><br><span class="line">created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">icons: &#123;</span><br><span class="line">time: <span class="string">'far fa-clock'</span>,</span><br><span class="line">        date: <span class="string">'far fa-calendar'</span>,</span><br><span class="line">        up: <span class="string">'fas fa-arrow-up'</span>,</span><br><span class="line">        down: <span class="string">'fas fa-arrow-down'</span>,</span><br><span class="line">        previous: <span class="string">'fas fa-chevron-left'</span>,</span><br><span class="line">        next: <span class="string">'fas fa-chevron-right'</span>,</span><br><span class="line">        today: <span class="string">'fas fa-calendar-check'</span>,</span><br><span class="line">        clear: <span class="string">'far fa-trash-alt'</span>,</span><br><span class="line">        close: <span class="string">'far fa-times-circle'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script</span></span><br></pre></td></tr></table></figure><p>上述代码中的created函数属于Vue生命周期中的一个钩子函数，请参考<a href="https://segmentfault.com/a/1190000008570622" target="_blank" rel="noopener">这篇博客</a></p><h2 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h2><p>安装相关依赖插件和配置插件图片，接下来可以使用这个插件了，整个Vue代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;div class="</span><span class="attr">col-md-12</span>"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">date-picker</span></span></span><br><span class="line"><span class="tag"><span class="attr">v-model</span>=<span class="string">"date"</span></span></span><br><span class="line"><span class="tag"><span class="attr">:config</span>=<span class="string">"options"</span></span></span><br><span class="line"><span class="tag">@<span class="attr">dp-hide</span>=<span class="string">"showDatePickResult"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'bootstrap/dist/css/bootstrap.css'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datePicker <span class="keyword">from</span> <span class="string">'vue-bootstrap-datetimepicker'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'pc-bootstrap4-datetimepicker/build/css/bootstrap-datetimepicker.css'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@fortawesome/fontawesome-free/css/all.css'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">name: <span class="string">'HelloWorld'</span>,</span><br><span class="line">data () &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">date: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">options: &#123;</span><br><span class="line">format: <span class="string">'YYYY-MM-DD HH:mm:ss'</span>,</span><br><span class="line">useCurrent: <span class="literal">false</span>,</span><br><span class="line">locale: <span class="string">'zh-cn'</span>,</span><br><span class="line">tooltips: &#123;</span><br><span class="line">  selectTime: <span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">showDatePickResult: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.date)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">components: &#123;</span><br><span class="line">datePicker</span><br><span class="line">&#125;,</span><br><span class="line">created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">$.extend(<span class="literal">true</span>, $.fn.datetimepicker.defaults, &#123;</span><br><span class="line">  icons: &#123;</span><br><span class="line">    time: <span class="string">'far fa-clock'</span>,</span><br><span class="line">    date: <span class="string">'far fa-calendar'</span>,</span><br><span class="line">    up: <span class="string">'fas fa-arrow-up'</span>,</span><br><span class="line">    down: <span class="string">'fas fa-arrow-down'</span>,</span><br><span class="line">    previous: <span class="string">'fas fa-chevron-left'</span>,</span><br><span class="line">    next: <span class="string">'fas fa-chevron-right'</span>,</span><br><span class="line">    today: <span class="string">'fas fa-calendar-check'</span>,</span><br><span class="line">    clear: <span class="string">'far fa-trash-alt'</span>,</span><br><span class="line">    close: <span class="string">'far fa-times-circle'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>其中<template></template>中的内容就不用多数了，了解Vue的都基本清楚，如果不太了解Vue的朋友可以查看Vue的<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">官网</a>。</p><p>data中的options内容是datetimepicker这个插件的相关配置，整体的配置请参考<a href="https://eonasdan.github.io/bootstrap-datetimepicker/Options/#defaultdate" target="_blank" rel="noopener">这个链接</a>，目前使用的配置描述如下：</p><ul><li>format：日期格式，这一块需要注意的是，如果将HH:mm:ss中的HH换成hh，则这个插件描述日期的方式会分成AM和PM</li><li>locale: 表示使用哪种语言，zh-cn表示中文简体</li><li>tooltips: 表示提示内容，这一块这个插件有个Bug，在选择日期和选择时间的提示都是“Select Time”，因此这里把这个提示设置为空</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求背景简介&quot;&gt;&lt;a href=&quot;#需求背景简介&quot; class=&quot;headerlink&quot; title=&quot;需求背景简介&quot;&gt;&lt;/a&gt;需求背景简介&lt;/h2&gt;&lt;p&gt;最近打算使用vue并结合前端工程化体系重构之前的一个Demo，其中有一个功能是使用bootstrap的dat
      
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="vue-cli 3" scheme="http://yoursite.com/tags/vue-cli-3/"/>
    
      <category term="datetimepicker" scheme="http://yoursite.com/tags/datetimepicker/"/>
    
  </entry>
  
  <entry>
    <title>Windows Server 2008 R2安装PostgreSQL数据库时出现的问题及解决方法</title>
    <link href="http://yoursite.com/2018/10/WindowsServer2008R2%E5%AE%89%E8%A3%85PostgreSQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%AF%E8%83%BD%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/10/WindowsServer2008R2安装PostgreSQL数据库可能出现的问题及解决方法/</id>
    <published>2018-10-12T16:00:00.000Z</published>
    <updated>2019-03-13T02:31:57.856Z</updated>
    
    <content type="html"><![CDATA[<p>在Windows Server 2008 R2操作系统上（没有安装SP1补丁）安装PostgreSQL 9.5数据库时会提示缺少Microsoft Visual C++ 2013 Redistributable (x64)软件。然而在安装此软件时，会提示下图中的问题。</p><p><img src="/2018/10/WindowsServer2008R2安装PostgreSQL数据库可能出现的问题及解决方法/WindowsServer2008安装PostgreSQL时出现的问题.png" alt="Windows Server 2008安装PostgreSQL时出现的问题"></p><p>此问题解决方法是：首先需要安装一个根证书，然后在安装Microsoft Visual C++ 2013 Redistributable (x64)这个软件。</p><p>软件下载地址：<a href="https://pan.baidu.com/s/1SU_Qx5UsS5xiI7_y60HUEw" target="_blank" rel="noopener">https://pan.baidu.com/s/1SU_Qx5UsS5xiI7_y60HUEw</a><br>提取码：9ziy</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Windows Server 2008 R2操作系统上（没有安装SP1补丁）安装PostgreSQL 9.5数据库时会提示缺少Microsoft Visual C++ 2013 Redistributable (x64)软件。然而在安装此软件时，会提示下图中的问题。&lt;/p
      
    
    </summary>
    
      <category term="软件安装" scheme="http://yoursite.com/categories/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="Windows Server 2008 R2" scheme="http://yoursite.com/tags/Windows-Server-2008-R2/"/>
    
      <category term="PostgreSQL" scheme="http://yoursite.com/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS API For JavaScript使用自定义GP服务</title>
    <link href="http://yoursite.com/2018/10/ArcGIS%20API%20For%20JavaScript%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89GP%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2018/10/ArcGIS API For JavaScript使用自定义GP服务/</id>
    <published>2018-10-12T16:00:00.000Z</published>
    <updated>2018-12-29T01:36:26.155Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概述：</strong>通过本篇博客，你将会学习如何通过ArcMap发布自定义GP服务和如何通过ArcGIS API For JavaScript API调用发布的自定义GP服务。</p><h2 id="使用ArcMap发布自定义GP服务"><a href="#使用ArcMap发布自定义GP服务" class="headerlink" title="使用ArcMap发布自定义GP服务"></a>使用ArcMap发布自定义GP服务</h2><p>在ArcMap中使用执行软件自身提供的工具箱或者执行自己定义的ModelBuilder亦或者执行自己创建的工具，无论执行成功与否，在ArcMap的Results窗口中都会有相应的记录。在Results窗口中，展开刚刚执行的任务可以查看此任务的执行的详细情况，也可以通过这些描述查看任务执行失败的原因。</p><p>在打开的窗口中，右键想要发布的成GP服务的工具或者模型，然后依次选择<strong>Share As</strong>、<strong>Geoprecessing Services</strong>打开服务发布窗口。</p><ul><li><p>如果想发布一个新的GP服务，则选择选择Publish a service；如果想覆盖已存在的GP服务，则选择Overwrite an existing service；如果只想发布一个服务定义文件，则选择第二项。这里我们选择第一项，发布一个新GP服务。点击“下一步”按钮，打开下一步操作。</p></li><li><p>在这一步中，选择一个ArcGIS Server连接，也就GP服务打算在哪个ArcGIS Server上发布，然后自定义服务名称。点击“下一步”按钮，打开下一步操作。</p></li><li><p>在这一步中，需要配置GP服务在ArcGIS Server服务器上的存储位置，可以创建一个新的文件夹，也可以选择已存在的文件夹。如果选择root文件夹，则发布的服务在ArcGIS Server首页中会看到，如果选择其他文件夹，则需要切换。点击“Continue”按钮，打开下一步操作。</p></li><li><p>在Service Editor窗口中，可以配置服务的其他参数。一般的流程是，首先点击右上角的“Analyze”按钮，让软件自动分析当前服务如果要发布会存在哪些问题。通常情况下，如果分析结果中没有Error这一项，就可以点击Publish按钮发布服务了。在分析结果，双击某一项分析结果，当前窗口会自动<br>跳转到这个结果的配置界面。在这一步需要<strong>值得注意</strong>的是，如果需要在JS API中获取GP服务的执行结果，<strong>一定要勾选View results with a map serveice</strong>。顾名思义，勾选这个以后，可以以调用MapService的方式调用GP服务的执行结果。</p></li></ul><h2 id="ArcGIS-API-For-JavaScript-使用发布的自定义GP服务"><a href="#ArcGIS-API-For-JavaScript-使用发布的自定义GP服务" class="headerlink" title="ArcGIS API For JavaScript 使用发布的自定义GP服务"></a>ArcGIS API For JavaScript 使用发布的自定义GP服务</h2><p>在JavaScript API中调用自定义GP服务与调用ArcGIS Server自带的GP服务方式是一样的，首先呢，需要在ArcGIS Server中获得GP服务的调用地址。</p><ul><li><p>在ArcGIS Server页面找到我们想调用的GP服务，然后点击服务名称，打开该服务的详细信息界面。</p></li><li><p>点击左侧的Capibilities选项卡，然后点击右侧的Rest URL地址，打开一个新的标签页。</p></li><li><p>在新的标签页中，点击Tasks下面的工具/模型名称，然后复制浏览器中URL，这就是我们要使用的GP服务的调用地址。在这个页面中，也可以查看这个GP服务的参数信息。</p></li></ul><p>接下来要做的就是在JS代码中调用这个GP服务。这个调用方式也比较简单，首先需要做的就是在dojo中引入”esri/tasks/Geoprocessor”,然后使用GP服务地址初始化Geoprocessor、配置GP服务参数、调用submitJob函数执行GP服务，最后在异步函数中获得GP服务的返回结果。</p><p>示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">"esri/tasks/Geoprocessor"</span>],</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">Geoprocessor</span>) </span>&#123;</span><br><span class="line">returen declare(<span class="literal">null</span>, &#123;</span><br><span class="line">gp_example: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> gp_service_url = <span class="string">"https://localhost:6443/arcgis/rest/services/IDW/Model2222/GPServer/IDW_24"</span>;  <span class="comment">// GP服务地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置GP服务参数</span></span><br><span class="line"><span class="keyword">var</span> gp_parameters = &#123;</span><br><span class="line">                    ZValue: <span class="string">"rain"</span>,</span><br><span class="line">                    OutputCellSize: <span class="number">0.005</span></span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> idw_gp = Geoprocessor(gp_service_url);</span><br><span class="line">                idw_gp.submitJob(gp_parameters, gp_job_complete, gp_job_status, gp_job_failed);</span><br><span class="line"></span><br><span class="line"><span class="comment">// GP服务执行完成后异步调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gp_job_complete</span>(<span class="params">job_info</span>) </span>&#123;</span><br><span class="line">                    idw_gp.getResultImageLayer(job_info.jobId, <span class="literal">null</span>, <span class="literal">null</span>, <span class="function"><span class="keyword">function</span>(<span class="params">layer</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> gp_result_lyrs_url = layer.url;  <span class="comment">// 获取GP服务执行结果的访问地址，如果想访问某个结果，可在后面添加"/" + 结果的索引号（从0开始）访问</span></span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问GP服务的执行状态</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gp_job_status</span>(<span class="params">job_info</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> job_status = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">switch</span> (job_info.jobStatus) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">"esriJobSubmitted"</span>:</span><br><span class="line">                            job_status = <span class="string">"提交插值任务..."</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">"esriJobExecuting"</span>:</span><br><span class="line">                            job_status = <span class="string">"插值处理..."</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">"esriJobFailed"</span>:</span><br><span class="line">                            job_status = <span class="string">"插值失败"</span>;</span><br><span class="line">                            alert(<span class="string">"抱歉，执行插值操作失败，请重新点击！"</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">"esriJobSucceeded"</span>:</span><br><span class="line">                            job_status = <span class="string">"插值成功"</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GP服务执行失败后异步调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gp_job_failed</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    alert(<span class="string">"抱歉，执行插值操作失败，请重新点击！"</span>);</span><br><span class="line">                &#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;概述：&lt;/strong&gt;通过本篇博客，你将会学习如何通过ArcMap发布自定义GP服务和如何通过ArcGIS API For JavaScript API调用发布的自定义GP服务。&lt;/p&gt;
&lt;h2 id=&quot;使用ArcMap发布自定义GP服务&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="ArcGIS API For JavaScript" scheme="http://yoursite.com/tags/ArcGIS-API-For-JavaScript/"/>
    
      <category term="GP服务" scheme="http://yoursite.com/tags/GP%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS Runtime SDK for Android(100.3)访问ArcGIS Online或Portal中的Item</title>
    <link href="http://yoursite.com/2018/10/ArcGIS%20Runtime%20SDK%20for%20Android(100.3)%E8%AE%BF%E9%97%AEArcGIS%20Online%E6%88%96Portal%E4%B8%AD%E7%9A%84Item/"/>
    <id>http://yoursite.com/2018/10/ArcGIS Runtime SDK for Android(100.3)访问ArcGIS Online或Portal中的Item/</id>
    <published>2018-10-04T16:00:00.000Z</published>
    <updated>2019-03-13T02:31:32.822Z</updated>
    
    <content type="html"><![CDATA[<p><strong>概述</strong>：ArcGIS Rumtime SDK for Android可以加载离线的slpk作为Scence中的Layer，也可以加载Portal（包括ArcGIS Online）中发布的Scene和SceneLayer。本篇博客简要介绍了Android SDK访问Portal或ArcGIS Online中的Item作为ScenceLayer或者Scene。</p><p>ArcGIS Runtime 提供了两种认证模式：App login 和 Named user login。本篇博客使用Named user login 认证模式。</p><p> 使用Named user login认证模式需要使用可登陆Portal（或者ArcGIS Online）的用户名和与其对应的密码。登陆后，操作者<strong>可访问该用户的私有内容或者该用户所在组织的分享给该用户的内容，可创建、更新和删除用户内容，可访问高级内容（如：geocoding、routing），可分享内容给所在组织的其他用户</strong>。因此，使用这种认证模式需要考虑相应的风险。好了，废物不多说，下面直接上干货。</p><p>首先呢，需要先配置AuthenticationManager，主要是为了显示在App中显示出登录界面，这个界面不需要咱们自己写，配置好后，会自动弹出。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AuthenticationChallengeHandler authenticationChallengeHandler =</span><br><span class="line">                <span class="keyword">new</span> DefaultAuthenticationChallengeHandler(<span class="keyword">this</span>);</span><br><span class="line">AuthenticationManager.setAuthenticationChallengeHandler(authenticationChallengeHandler);</span><br></pre></td></tr></table></figure><p>其次，需要设置Portal，并设置监听函数。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Portal portal = <span class="keyword">new</span> Portal(<span class="string">"https://www.arcgis.com"</span>, <span class="keyword">true</span>);</span><br><span class="line">portal.addDoneLoadingListener(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (portal.getLoadStatus() == LoadStatus.LOADED) &#123;</span><br><span class="line">        <span class="comment">// do something when you login successfully</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (portal.getLoadStatus() == LoadStatus.FAILED_TO_LOAD) &#123;</span><br><span class="line">        <span class="comment">// // do something when you login failed</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">portal.loadAsync();</span><br></pre></td></tr></table></figure><p>最后，使用Portal中的Item对应的Id创建ScencLayer或者Scene。相应代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PortalItem portalItem = <span class="keyword">new</span> PortalItem(portal, <span class="string">"465077bf1afa4d048f2875eba679c4e6"</span>);</span><br><span class="line">ArcGISSceneLayer arcGISSceneLayer = <span class="keyword">new</span> ArcGISSceneLayer(portalItem);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PortalItem portalItem = <span class="keyword">new</span> PortalItem(portal, <span class="string">"465077bf1afa4d048f2875eba679c4e6"</span>);</span><br><span class="line">ArcGISScene arcGISScene = <span class="keyword">new</span> ArcGISScene(portalItem);</span><br></pre></td></tr></table></figure><p>其中，”465077bf1afa4d048f2875eba679c4e6”为Item的Id。在Portal（或者ArcGIS Online）中访问Item时，其对应的URL最后（如：**id=04ca8335c37a4ced90cd829c49b0a900）有该内容对应的ID。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;概述&lt;/strong&gt;：ArcGIS Rumtime SDK for Android可以加载离线的slpk作为Scence中的Layer，也可以加载Portal（包括ArcGIS Online）中发布的Scene和SceneLayer。本篇博客简要介绍了An
      
    
    </summary>
    
      <category term="开发" scheme="http://yoursite.com/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="ArcGIS Runtime SDK for Android" scheme="http://yoursite.com/tags/ArcGIS-Runtime-SDK-for-Android/"/>
    
      <category term="Portal" scheme="http://yoursite.com/tags/Portal/"/>
    
  </entry>
  
  <entry>
    <title>Portal迁移（以部署UrbanIOC为例）</title>
    <link href="http://yoursite.com/2018/5/Portal%E8%BF%81%E7%A7%BB/"/>
    <id>http://yoursite.com/2018/5/Portal迁移/</id>
    <published>2018-05-22T16:00:00.000Z</published>
    <updated>2019-03-13T02:30:35.081Z</updated>
    
    <content type="html"><![CDATA[<p>背景环境如下：</p><p>1、已在虚拟机A上安装好Portal、Server、WebAdaptor和DataStore并且将UrbanIOC项目部署到该虚拟机上；</p><p>2、虚拟机A1的计算机全名为example1.esri.com，IP地址为192.168.1.1（只是举例，并不是真正的计算机全名和IP地址）；</p><p>3、申请了一个域名（比如escri.tech，此处需要注意的是申请的域名不能有下划线，否则Portal安装不成功），现需要使用此域名访问UrbanIOC。</p><p>为了解决这种问题，可能大家首先想到的是创建一个计算机全名为esri.tech的虚拟机B，然后安装Portal、Server、WebAdaptor和DataSotre，然后重新部署UrbanIOC。这种方法肯定可以解决这中问题，但是非常耗时间，包括重装软件的时间、项目数据发布的时间（该项目需要发布一个较大的三维场景，数据发布时间挺长的）。在这里给介绍一种新的解决方法：<strong>在虚拟机B上只安装WebAdaptor，然后为虚拟机B上的Portal和Server重新配置WebAdaptor的，最后修改Portal和Server的托管关系</strong>。</p><ul><li>1、新建虚拟机B，并修改其计算机名为esri、DNS为tech，修改完成后，通过查看系统属性，可确认计算机全名为esri.tech。</li></ul><p><img src="/2018/5/Portal迁移/查看计算机全名.png" alt="image"></p><ul><li><p>2、配置虚拟机B的hosts文件（C:\Windows\System32\drivers\etc），添加内容“192.168.1.1 example1.esri.com”，192.168.1.1为虚拟机A的IP地址，example1.esri.com为虚拟机A的计算机全名。这样就可以在虚拟机B中使用虚拟机A的域名访问Portal。</p></li><li><p>3、在虚拟机B上安装WebAdaptor。这里使用JAVA版的WebAdaptor，<a href="http://enterprise.arcgis.com/zh-cn/web-adaptor/latest/install/java-windows/welcome-arcgis-web-adaptor-install-guide.htm" target="_blank" rel="noopener">安装教程可参考ESRI官网</a>。</p></li><li><p>4、在虚拟机A中解除Portal的WebApdator配置。通过地址（<a href="https://example1.esri.com/portal）访问Portal的管理员页面，依次点击**System*" target="_blank" rel="noopener">https://example1.esri.com/portal）访问Portal的管理员页面，依次点击**System*</a>* 、<strong>WebAdaptor</strong> ，查看Portal配置的WebAdaptor。然后再依次点击<strong>对应的WebAdaptor名称</strong> (例如：example1.esri.com)、<strong>Unregister Web Adaptor</strong>。</p></li></ul><p><img src="/2018/5/Portal迁移/Portal管理员登录界面.png" alt="Portal管理员登录界面"></p><p><img src="/2018/5/Portal迁移/Portal管理员登录界面-System.png" alt="Portal管理员登录界面-System"></p><p><img src="/2018/5/Portal迁移/Portal管理员登录界面-WebAdaptor.png" alt="Portal管理员登录界面-WebAdaptor"></p><p><img src="/2018/5/Portal迁移/Portal管理员登录界面-反注册WebAdaptor.png" alt="Portal管理员登录界面-反注册WebAdaptor"></p><ul><li><p>5、在虚拟机A中解除Server的WebAdaptor配置。通过地址（<a href="https://exampl1.esri.com:6443/arcgis/manager）访问Server的管理员页面，依次点击**站点*" target="_blank" rel="noopener">https://exampl1.esri.com:6443/arcgis/manager）访问Server的管理员页面，依次点击**站点*</a>* 、<strong>Web Adaptor</strong> ，然后点击取消注册按钮<strong>×</strong> ，在弹出的确定窗口点击<strong>是</strong> , 取消Server的WebAdaptor注册。</p></li><li><p>6、在虚拟机B中按照官网教程在WebAdaotor分别注册Portal和Server。这里需要注意的是，此时的<strong>WebAdator地址是虚拟机B的WebAdator地址</strong>（例如：<a href="https://esri.tech/arcgis/webadaptor），而**Portal和Server地址是虚拟机A中的Portal和Server地址**（例如：Portal的地址为https://exampl1.esri.com:7443，Server的地址为https://example1.esri.com:6443）。" target="_blank" rel="noopener">https://esri.tech/arcgis/webadaptor），而**Portal和Server地址是虚拟机A中的Portal和Server地址**（例如：Portal的地址为https://exampl1.esri.com:7443，Server的地址为https://example1.esri.com:6443）。</a></p></li><li><p>7、修改Portal与Server的托管关系。在虚拟机B中访问页面Portal，依次点击<strong>Orgnaization</strong> 、 <strong>Servers</strong> 、 <strong>ADD SERVER</strong> ，然后在弹出的页面中，Services URL对应值为”<a href="https://esri.tech/arcgis/manager&quot;，Administration" target="_blank" rel="noopener">https://esri.tech/arcgis/manager&quot;，Administration</a> URL对应值为”<a href="https://esri.tech/arcgis/manager&quot;，Username和Password分别为Server的管理员账户和密码。" target="_blank" rel="noopener">https://esri.tech/arcgis/manager&quot;，Username和Password分别为Server的管理员账户和密码。</a></p></li></ul><p><img src="/2018/5/Portal迁移/配置Portal和Server的托管.png" alt="配置Portal和Server的托管"></p><ul><li>8、最后修改UrbaIOC的配置文件，然后将其部署到虚拟机B中tomacat中。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;背景环境如下：&lt;/p&gt;
&lt;p&gt;1、已在虚拟机A上安装好Portal、Server、WebAdaptor和DataStore并且将UrbanIOC项目部署到该虚拟机上；&lt;/p&gt;
&lt;p&gt;2、虚拟机A1的计算机全名为example1.esri.com，IP地址为192.168.1
      
    
    </summary>
    
      <category term="Portal操作" scheme="http://yoursite.com/categories/Portal%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="Portal" scheme="http://yoursite.com/tags/Portal/"/>
    
  </entry>
  
  <entry>
    <title>Portal注册APP</title>
    <link href="http://yoursite.com/2018/5/Portal%E6%B3%A8%E5%86%8CAPP/"/>
    <id>http://yoursite.com/2018/5/Portal注册APP/</id>
    <published>2018-05-14T16:00:00.000Z</published>
    <updated>2019-03-13T02:30:35.098Z</updated>
    
    <content type="html"><![CDATA[<p>此篇博客是基于Enterprise实现APP注册。</p><p>安装、配置Portal完成后（如果不清楚如何安装Portal，请查看我的另外一篇博客），进入Enterprise界面，在<strong>Content</strong>选项卡中，依次点击<strong>Add Item</strong> 、<strong>An application</strong>，打开添加应用界面。</p><p><img src="/2018/5/Portal注册APP/打开AddApplication界面.png" alt="打开AddApplication界面"></p><p>在<strong>Add an application</strong>窗口中，选择<strong>Type</strong> 为 <strong>Web Mapping</strong>、设置<strong>URL</strong> 为App主页路径（例如：<strong><a href="https://jiaoxn.esri.com/linkview/index.html" target="_blank" rel="noopener">https://jiaoxn.esri.com/linkview/index.html</a></strong>），然后输入<strong>Title</strong>和<strong>Tags</strong> ，<strong>Purpose</strong>和<strong>API</strong>可以保持不变。</p><p><img src="/2018/5/Portal注册APP/AddAnApplication配置.png" alt="AddAnApplication配置"></p><p>添加Application后，在右侧列表中点击对应的名称进入其详细信息页面，然后点击<strong>Setting</strong>选项卡，滑动到页面底端，在<strong>App Registration</strong> 中点击 <strong>Updata</strong>按钮，打开<strong>Registered Info</strong> 界面。在此界面中，在<strong>Redirect URI</strong> 下方的输入框中上一步中主页面URL地址中的IP和端口，如：<strong><a href="https://jiaoxn.esri.com" target="_blank" rel="noopener">https://jiaoxn.esri.com</a></strong> （此处我配置了Tomcat的https，其实它是访问了443端口）；然后依次点击<strong>Add</strong>按钮和 <strong>Update</strong> 按钮，即完成Portal注册App过程。</p><p><img src="/2018/5/Portal注册APP/注册Application.png" alt="注册Application"></p><p>App注册完成口记录上图中的App ID用于OAuth验证登录。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;此篇博客是基于Enterprise实现APP注册。&lt;/p&gt;
&lt;p&gt;安装、配置Portal完成后（如果不清楚如何安装Portal，请查看我的另外一篇博客），进入Enterprise界面，在&lt;strong&gt;Content&lt;/strong&gt;选项卡中，依次点击&lt;strong&gt;Add
      
    
    </summary>
    
      <category term="Portal操作" scheme="http://yoursite.com/categories/Portal%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="Portal" scheme="http://yoursite.com/tags/Portal/"/>
    
  </entry>
  
  <entry>
    <title>Webstorm配置Tomcat</title>
    <link href="http://yoursite.com/2018/5/Webstorm%E9%85%8D%E7%BD%AETomcat/"/>
    <id>http://yoursite.com/2018/5/Webstorm配置Tomcat/</id>
    <published>2018-05-14T16:00:00.000Z</published>
    <updated>2019-03-13T01:52:23.393Z</updated>
    
    <content type="html"><![CDATA[<p>在Webstorm中运行/调试前端程序时，浏览器的网址常常为“<em><a href="http://localhost:63342/project_folder_path/html_name.html" target="_blank" rel="noopener">http://localhost:63342/project_folder_path/html_name.html</a></em>”，但有时需要为了解决某些资源的跨域问题或者项目依赖项的问题，需要将代码部署到Tomcat服务器上，能够使用本机IP或者本机DNS方式访问页面，但如果每次修改后将工程文件拷贝到Tomcat中，这非常费时、费力。这篇博客给大家介绍了Webstorm联合Tomcat的方式。</p><ul><li><p>将前端工程文件夹拷贝到Tomcat的webapp目录下</p></li><li><p>在Webstorm的Seeting面板中，查找Deployment选项，然后添加Tomcat服务器，具体操作流程如下：</p></li></ul><p><img src="/2018/5/Webstorm配置Tomcat/添加Tomcat服务器.png" alt="添加Tomcat服务器"></p><p><img src="/2018/5/Webstorm配置Tomcat/Tomcat服务配置-Connection.png" alt="Tomcat服务配置-Connection"></p><p><img src="/2018/5/Webstorm配置Tomcat/Tomcat服务配置-Mapping.png" alt="Tomcat服务配置-Mapping"></p><ul><li>完成上述配置后，可以通过以下步骤使得修改在Webstorm中修改的内容自动提交到Tomcat中</li></ul><p><img src="/2018/5/Webstorm配置Tomcat/添加Tomcat服务器.png" alt="添加Tomcat服务器"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Webstorm中运行/调试前端程序时，浏览器的网址常常为“&lt;em&gt;&lt;a href=&quot;http://localhost:63342/project_folder_path/html_name.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;htt
      
    
    </summary>
    
      <category term="软件操作" scheme="http://yoursite.com/categories/%E8%BD%AF%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="Webstorm" scheme="http://yoursite.com/tags/Webstorm/"/>
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
  </entry>
  
</feed>
